options {
IGNORE_CASE = true;
STATIC = false;
OUTPUT_DIRECTORY="D:\\Titus\\Documents\\Proyectos\\Compiladores 2\\Proyecto 1\\FISQL\\Servidor Base de Datos\\[Compi2]Proyecto1_201213587\\src\\Analisis\\Usql\\";
}

PARSER_BEGIN(usqlGrammar)
package Analisis.Usql;

import Funciones.Usql.*;
import Static.*;
import java.util.ArrayList;
import EjecucionUsql.*;

public class usqlGrammar {
  public static void main(String args[]) throws ParseException {
    usqlGrammar parser = new usqlGrammar(System.in);
    parser.S();
  }
}
PARSER_END(usqlGrammar)

TOKEN:
{    
    <MAS:"+"> {System.out.println(image);}
    |<MENOS:"-"> {System.out.println(image);}
    |<POR:"*"> {System.out.println(image);}
    |<DIVISION:"/"> {System.out.println(image);}
    |<POTENCIA:"^"> {System.out.println(image);}
    |<AUMENTO:"++"> {System.out.println(image);}
    |<DECREMENTO:"--"> {System.out.println(image);}
}

TOKEN:
{
    
    <PAR_IZQ:"(">{System.out.println(image);}
    |<PAR_DER:")">{System.out.println(image);}
    |<LLAVE_IZQ:"{">{System.out.println(image);}
    |<LLAVE_DER:"}">{System.out.println(image);}
    |<COR_IZQ:"[">{System.out.println(image);}
    |<COR_DER:"]">{System.out.println(image);}
    |<PCOMA:";">{System.out.println(image);}
    |<COMA:",">{System.out.println(image);}
    |<DOSP:":">{System.out.println(image);}
    |<IGUAL:"=">{System.out.println(image);}
    |<PUNTO:".">{System.out.println(image);}
    |<FLECHA_IZQ:"<<">{System.out.println(image);}
    |<FLECHA_DER:">>">{System.out.println(image);}
}

TOKEN:
{
  
    <IGUALACION:"=="> {System.out.println(image);}
    |<DIFERENCIACION:"!="> {System.out.println(image);}
    |<MENOR:"<"> {System.out.println(image);}
    |<MAYOR:">"> {System.out.println(image);}
    |<MENORIGUAL:"<="> {System.out.println(image);}
    |<MAYORIGUAL:">="> {System.out.println(image);}  
    |<AND:"&&"> {System.out.println(image);}
    |<OR:"||"> {System.out.println(image);}
    |<NOT:"!"> {System.out.println(image);}

}


TOKEN:
{
  
  <T_TEXT: ("text")> {System.out.println(image);}
  |<T_INTEGER: ("integer")> {System.out.println(image);}
  |<T_DOUBLE: ("double")> {System.out.println(image);}
  |<T_BOOL:("bool")> {System.out.println(image);}
  |<T_DATE: ("date")> {System.out.println(image);}
  |<T_DATETIME: ("datetime")> {System.out.println(image);}
}


TOKEN:
{
  
    <T_CREAR:("crear")> {System.out.println(image);}
    |<T_BASE_DATOS:("base_datos")> {System.out.println(image);}
    |<T_TABLA:("tabla")> {System.out.println(image);}
    |<T_NULO:("nulo")> {System.out.println(image);}
    |<T_NO_NULO:("no nulo")> {System.out.println(image);}
    |<T_AUTOINCREMETABLE:("autoincrementable")> {System.out.println(image);}
    |<T_LLAVE_PRIMARIA:("llave_primaria")> {System.out.println(image);}
    |<T_LLAVE_FORANEA:("llave_foranea")> {System.out.println(image);}
    |<T_OBJETO:("objeto")> {System.out.println(image);}
    |<T_PROCEDIMIENTO:("procedimiento")> {System.out.println(image);}
    |<T_FUNCION:("funcion")> {System.out.println(image);}
    |<T_RETORNO:("retorno")> {System.out.println(image);}
    |<T_USUARIO:("usuario")> {System.out.println(image);}
    |<T_COLOCAR:("colocar")> {System.out.println(image);}
    |<T_PASSWORD:("password")> {System.out.println(image);}
    |<T_USAR:("usar")> {System.out.println(image);}
    |<T_ALTERAR:("alterar")> {System.out.println(image);}
    |<T_AGREGAR:("agregar")> {System.out.println(image);}
    |<T_QUITAR:("quitar")> {System.out.println(image);}
    |<T_CAMBIAR:("cambiar")> {System.out.println(image);}
    |<T_ELIMINAR:("eliminar")> {System.out.println(image);}
    |<T_INSERTAR:("insertar en")> {System.out.println(image);}
    |<T_VALORES:("valores")> {System.out.println(image);}
    |<T_ACTUALIZAR:("actualizar")> {System.out.println(image);}
    |<T_DONDE:("donde")> {System.out.println(image);}
    |<T_BORRAR:("borrar en")> {System.out.println(image);}
    |<T_SELECCIONAR:("seleccionar")> {System.out.println(image);}
    |<T_DE:(("de"))> {System.out.println(image);}
    |<T_ORDENAR:("ordenar por")> {System.out.println(image);}
    |<T_ASC:("asc")> {System.out.println(image);}
    |<T_DESC:("desc")> {System.out.println(image);}
    |<T_OTORGAR:("otorgar permisos")> {System.out.println(image);}
    |<T_DENEGAR:("denegar permisos")> {System.out.println(image);}
    |<T_DECLARAR:(("declarar"))> {System.out.println(image);}
    |<T_SI:(("si"))> {System.out.println(image);}
    |<T_SINO:(("sino"))> {System.out.println(image);}
    |<T_SELECCIONA:(("selecciona"))> {System.out.println(image);}
    |<T_CASO:(("caso"))> {System.out.println(image);}
    |<T_DEFECTO:(("defecto"))> {System.out.println(image);}
    |<T_PARA:(("para"))> {System.out.println(image);}
    |<T_MIENTRAS:(("mientras"))> {System.out.println(image);}
    |<T_DETENER:(("detener"))> {System.out.println(image);}
    |<T_IMPRIMIR:(("imprimir"))> {System.out.println(image);}
    |<T_FECHA:(("fecha"))> {System.out.println(image);}
    |<T_FECHA_HORA:(("fecha_hora"))> {System.out.println(image);}
    |<T_CONTAR:(("contar"))> {System.out.println(image);}
    |<T_BACKUP_USQL:(("backup usqldump"))> {System.out.println(image);}
    |<T_BACKUP_COMPLETO:(("backup completo"))> {System.out.println(image);}
    |<T_RESTAURAR_USQL:(("restaurar usqldump"))> {System.out.println(image);}
    |<T_RESTAURAR_COMPLETO:(("restaurar completo"))> {System.out.println(image);}
}   

TOKEN:
{  
    <CADENA:"\"" (~["\""])*"\""> {System.out.println(image);}
    |<ENTERO: (["0"-"9"])+ > {System.out.println(image);}
    |<FALSO:"falso"> {System.out.println(image);}
    |<VERDADERO:"verdadero"> {System.out.println(image);}
    |<#NUMERO: ["0"-"9"]>
    |<DECIMAL: (<NUMERO>)+(".")(<NUMERO>)+> {System.out.println(image);}
    |<ID: (["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])*> {System.out.println(image);}
    |<ARROBA:"@" (["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])*>{System.out.println(image);}
    |<DATE: (("0"["1"-"9"])|(["1"-"2"]["0"-"9"])| ("3" ["0"-"1"] )) "-" (("0"["1"-"9"])| "1"["0"-"2"]) "-" ["0"-"9"]["0"-"9"]["0"-"9"]["0"-"9"]>{System.out.println( image + " fecha");}
    |<TIME: ((["0"-"1"]["0"-"9"])| ("2" ["0"-"3"] )) ":" (["0"-"5"]["0"-"9"]) ":" (["0"-"5"]["0"-"9"])>{System.out.println(image + "hora");}

}

SKIP: 
{
  " "
| "\n"
| "\r"
| "\t"
}

SPECIAL_TOKEN:
{
    <COMENTARIO_LINEA: "#" (~["\n"])*>{System.out.println(image);}
    |<COMENTARIO_MULTI: "#*" (~["*"])* "*#">{System.out.println(image);}
}

void S():
{}
{   {System.out.println("Comienza!!");}
    (L_INSTRUCCION()) ?
    {System.out.println("Exito!!");}
}

void L_INSTRUCCION():
{}
{
    INSTRUCCION() (L_INSTRUCCION())?
}

void INSTRUCCION() :
{}
{    
    {System.out.println("etntro llamada ddl");}DDL() 
    | {System.out.println("etntro llamada d,ml");}DML()
    | {System.out.println("etntro llamada dcl");}DCL()
    | {System.out.println("etntro llamada decla");}DECLARACION()    
    |{System.out.println("etntro llamada metodo");} LLAMADA_METODO()
    |{System.out.println("etntro llamada imprimr");}<T_IMPRIMIR> <PAR_IZQ> LOGICA_OR() <PAR_DER> <PCOMA> 
}



Simbolo DDL():
{}
{
    <T_USAR> <ID> <PCOMA>
    |CREATE()
    |ALTER()
    |ELIMINAR()
    |BACKUP()
    |RESTAURAR()

    {return null;}
}

Simbolo DML():
{}
{
    INSERTAR()
    |ACTUALIZAR()
    |BORRAR()
    |SELECCIONAR() <PCOMA> {return null;}
}

Simbolo DCL():
{}
{
    <T_OTORGAR> <ID> <COMA> <ID> <PUNTO> (<POR> | <ID>) <PCOMA>
    |<T_DENEGAR> <ID> <COMA> <ID> <PUNTO> (<POR> | <ID>) <PCOMA> {return null;}
}

Simbolo SSL():
{}
{
    DECLARACION()
    |ASIGNACION()
    |SI()
    |SELECCIONA()
    |PARA()
    |MIENTRAS()
    |<T_DETENER> <PCOMA>
    |<T_IMPRIMIR> <PAR_IZQ> LOGICA_OR() <PAR_DER> <PCOMA> 
    |RETORNO() <PCOMA>
    |LLAMADA_METODO() {return null;}
}

void LLAMADA_METODO():
{}
{
    <ID> <PAR_IZQ> (L_EXPRESIONES())? <PAR_DER> <PCOMA>
}

void CREATE():
{}
{
    <T_CREAR> (((CREATE_BASE() | CREATE_TABLA() | CREATE_OBJETO() | CREATE_USUARIO()) <PCOMA>) 
                | CREATE_PROCEDIMIENTO()
                | CREATE_FUNCION()                
                )                
}

void CREATE_BASE():
{}
{
    <T_BASE_DATOS> <ID>
}

void CREATE_TABLA():
{}
{
    <T_TABLA> <ID> <PAR_IZQ> L_CAMPO() <PAR_DER>
}

void L_CAMPO():
{}
{
    CAMPO() (<COMA> L_CAMPO())?
}

void CAMPO():
{}
{
    TIPO_DATO() <ID> (L_COMPLEMENTO())?
}

void TIPO_DATO():
{}
{
    <T_TEXT>
    |<T_INTEGER>
    |<T_DOUBLE>
    |<T_BOOL>
    |<T_DATE>
    |<T_DATETIME>
    |<ID>
}

void L_COMPLEMENTO():
{}
{
    COMPLEMENTO() (L_COMPLEMENTO())?
}

void COMPLEMENTO():
{}
{
    <T_NULO>
    |<T_NO_NULO>
    |<T_AUTOINCREMETABLE>
    |<T_LLAVE_PRIMARIA>
    |<T_LLAVE_FORANEA> <ID>
}

void CREATE_OBJETO():
{}
{
    <T_OBJETO> <ID> <PAR_IZQ> L_ATRIBUTO() <PAR_DER>
}

void L_ATRIBUTO():
{}
{
    ATRIBUTO() (<COMA> L_ATRIBUTO())?
}

void ATRIBUTO():
{}
{
    TIPO_DATO_ATRIBUTO() <ID>
}

String TIPO_DATO_ATRIBUTO():
{}
{
    <T_TEXT> {return Constante.TCadena;}
    |<T_INTEGER> {return Constante.TEntero;}
    |<T_DOUBLE> {return Constante.TDecimal;}
    |<T_BOOL>   {return Constante.TBool;}
    |<T_DATE>   {return Constante.TDate;}
    |<T_DATETIME>   {return Constante.TDateTime;}
}

void CREATE_PROCEDIMIENTO():
{}
{
    <T_PROCEDIMIENTO> <ID> <PAR_IZQ> (L_PARAMETRO())? <PAR_DER> <LLAVE_IZQ>  L_SENTENCIAS()  <LLAVE_DER>
}

void L_PARAMETRO():
{}
{
    PARAMETRO() (<COMA> L_PARAMETRO())?
}

void PARAMETRO():
{}
{
    TIPO_DATO() <ARROBA>
}

void CREATE_FUNCION():
{}
{
    <T_FUNCION> <ID> <PAR_IZQ> (L_PARAMETRO())? <PAR_DER> TIPO_DATO() <LLAVE_IZQ>  L_SENTENCIAS()  <LLAVE_DER>
}

void CREATE_USUARIO():
{}
{
    <T_USUARIO> <ID> <T_COLOCAR> <T_PASSWORD> <IGUAL> <CADENA>
}

void RETORNO():
{}
{
    <T_RETORNO> LOGICA_OR()
}

void ALTER():
{}
{
    <T_ALTERAR> (ALTER_TABLA() | ALTER_OBJETO() | ALTER_USUARIO()) <PCOMA>         
}

void ALTER_TABLA():
{}
{
    <T_TABLA> <ID> (<T_AGREGAR> <PAR_IZQ> L_CAMPO() <PAR_DER>
    |<T_QUITAR> L_ID())
}

void L_ID():
{}
{
    <ID> (<COMA> L_ID())?
}

void ALTER_OBJETO():
{}
{
    <T_OBJETO> <ID> (<T_AGREGAR> <PAR_IZQ> L_ATRIBUTO() <PAR_DER>
    |<T_QUITAR> L_ID())
}

void ALTER_USUARIO():
{}
{
    <T_USUARIO> <ID> <T_CAMBIAR> <T_PASSWORD> <IGUAL> <CADENA>
}


void ELIMINAR():
{}
{
    <T_ELIMINAR> (<T_TABLA> | <T_BASE_DATOS> | <T_OBJETO> | <T_USUARIO>) <ID> <PCOMA>
}



void INSERTAR():
{}
{
    <T_INSERTAR> <T_TABLA> <ID> <PAR_IZQ> (L_ID() <PAR_DER> <T_VALORES> <PAR_IZQ>)? L_EXPRESIONES() <PAR_DER> <PCOMA>
}

void ACTUALIZAR():
{}
{
    <T_ACTUALIZAR> <T_TABLA> <ID> <PAR_IZQ> L_ID() <PAR_DER> <T_VALORES> <PAR_IZQ> L_EXPRESIONES() <PAR_DER> (<T_DONDE> LOGICA_OR())? <PCOMA>
}

void BORRAR():
{}
{
    <T_BORRAR> <T_TABLA> <ID> (<T_DONDE> LOGICA_OR())? <PCOMA>
}

void SELECCIONAR():
{}
{
    <T_SELECCIONAR> (L_ID() | <POR>) <T_DE> L_ID() (<T_DONDE> LOGICA_OR())? (<T_ORDENAR> <ID> (<T_ASC>|<T_DESC>))?
}


ArrayList<Simbolo> L_SENTENCIAS():
{ArrayList<Simbolo> ls = new ArrayList<Simbolo>();}
{
    (ls=L_SENTENCIA())? {return ls;}
}

ArrayList<Simbolo> L_SENTENCIA():
{ArrayList<Simbolo> ls = new ArrayList<Simbolo>(); ArrayList<Simbolo> ls2 = new ArrayList<Simbolo>();}
{
    ls=SENTENCIA() (ls2=L_SENTENCIA())?

    {
        for(Simbolo sim : ls2){
            ls.add(sim);
        }
        return ls;
    }
}

ArrayList<Simbolo> SENTENCIA():
{Simbolo s;}
{
    (s=SSL()
    |s=DML()
    |s=DCL()){ArrayList<Simbolo> l = new ArrayList<Simbolo>(); l.add(s); return l;}
}



ArrayList<Simbolo> DECLARACION():
{ArrayList<FDeclaracion> lv = new ArrayList<FDeclaracion>(); Token t,t2; String td; FNodoExpresion val = null;}
{
    t2=<T_DECLARAR> lv= L_VARIABLE() ((td=TIPO_DATO_ATRIBUTO() (<IGUAL> val = LOGICA_OR())?)
                    | t=<ID> {td = t.image;}) <PCOMA> {
                                                        ArrayList<Simbolo> lista = new ArrayList<Simbolo>();
                                                        for(FDeclaracion d : lv){
                                                            d.Tipo = td;
                                                            Simbolo s = new Simbolo(Constante.TDeclaracion, Constante.TDeclaracion, Constante.TVariable, new Ambito(Constante.TDeclaracion, new ArrayList<Simbolo>()), d, t2.beginLine, t2.beginColumn);
                                                            lista.add(s);                                                            
                                                        }
                                                        return lista;
                                                      }
}

ArrayList<FDeclaracion> L_VARIABLE():
{ArrayList<FDeclaracion> lv = new ArrayList<FDeclaracion>(); ArrayList<FDeclaracion> lv2 = new ArrayList<FDeclaracion>(); Token t;}
{
    t=<ARROBA> {lv.add(new FDeclaracion("", t.image.substring(1, t.image.length()), new Ambito(Constante.TDeclaracion, new ArrayList<Simbolo>()), null, t.beginLine, t.beginColumn));} (<COMA> lv2=L_VARIABLE()
                                                                                    {
                                                                                        for(FDeclaracion s : lv2){
                                                                                            lv.add(s);
                                                                                        }
                                                                                    }
                                                                                    )? {return lv;} 
}

Simbolo ASIGNACION():
{Token t; Token t2 = null; FNodoExpresion e;}
{
    t=<ARROBA> (<PUNTO> t2=<ID>)? <IGUAL> e=LOGICA_OR() <PCOMA> {
                                                                    FLlamadaVariable fv;
                                                                    if(t2 != null){
                                                                        fv = new FLlamadaVariable(t.image.substring(1, t.image.length()), t2.image, t.beginLine, t.beginColumn);
                                                                    }else{
                                                                        fv = new FLlamadaVariable(t.image.substring(1, t.image.length()), "", t.beginLine, t.beginColumn);
                                                                    }

                                                                    FAsignacion as = new FAsignacion(fv, new Ambito(Constante.TAsignacion, new ArrayList<Simbolo>()), e);
                                                                    return new Simbolo(Constante.TAsignacion, Constante.TAsignacion, Constante.TAsignacion, as.Ambito, as, t.beginLine, t.beginColumn);
                                                                }
}

Simbolo SI():
{Token t; FNodoExpresion condicion; ArrayList<Simbolo> asi = new ArrayList<Simbolo>(); ArrayList<Simbolo> asino = new ArrayList<Simbolo>();}
{
    t=<T_SI> <PAR_IZQ> condicion=LOGICA_OR() <PAR_DER> <LLAVE_IZQ> asi=L_SENTENCIAS()  <LLAVE_DER> (<T_SINO> <LLAVE_IZQ> asino=L_SENTENCIAS() <LLAVE_DER>)?
    {
        Ambito ambitosi = new Ambito(Constante.TSi, asi);
        Ambito ambitosino = new Ambito(Constante.TSi, asino);
        Ambito ambito = new Ambito(Constante.TSi, new ArrayList<Simbolo>());
        
        for(Simbolo sim: ambitosi.TablaSimbolo){
            sim.Ambito.Padre = ambito;
        }

        for(Simbolo sim: ambitosino.TablaSimbolo){
            sim.Ambito.Padre = ambito;
        } 

        FSi fs = new FSi(condicion, ambitosi, ambitosino, ambito);
        Simbolo s = new Simbolo(Constante.TSi, Constante.TSi, Constante.TSi, fs.Ambito, fs, t.beginLine, t.beginColumn);
        return s;
    }
}

Simbolo SELECCIONA():
{Token t; FNodoExpresion exp; ArrayList<FCaso> lc = new ArrayList<FCaso>(); FCaso defecto= null;}
{
    t=<T_SELECCIONA> <PAR_IZQ> exp=LOGICA_OR() <PAR_DER> <LLAVE_IZQ> lc=L_CASOS() (defecto=DEFECTO())? <LLAVE_DER>
    {
        Ambito ambito = new Ambito(Constante.TSeleccion, new ArrayList<Simbolo>());
        for(FCaso caso: lc){
            for(Simbolo sim: caso.Ambito.TablaSimbolo){
                sim.Ambito.Padre = ambito;
            }
        }
        for(Simbolo sim: defecto.Ambito.TablaSimbolo){
                sim.Ambito.Padre = ambito;
        }
        FSelecciona fs = new FSelecciona(exp,lc,defecto,ambito);
        Simbolo s = new Simbolo(Constante.TSeleccion, Constante.TSeleccion, Constante.TSeleccion, fs.Ambito, fs, t.beginLine, t.beginColumn);
        return s;
    }
}

ArrayList<FCaso> L_CASOS():
{Token t; FNodoExpresion p; ArrayList<Simbolo> ls; ArrayList<FCaso> lc2 = new ArrayList<FCaso>();}
{
    t=<T_CASO> p=VALOR_CASO() <DOSP> ls=L_SENTENCIAS() (lc2=L_CASOS())?
    {
        Ambito ambito = new Ambito(Constante.TCaso, ls);
        for(Simbolo sim : ambito.TablaSimbolo){
            sim.Ambito.Padre = ambito;
        }
        FCaso caso = new FCaso(p, ambito);
        ArrayList<FCaso> lc = new ArrayList<FCaso>();
        lc.add(caso);

        for(FCaso ca : lc2){
            lc.add(ca);
        }

        return lc;        
    }
}

FNodoExpresion VALOR_CASO():
{Token t;}
{
    t=<CADENA> { return new FNodoExpresion(null, null, Constante.TText, Constante.TText, t.beginLine, t.beginColumn, t.image.substring(1, t.image.length()));}
    | t=<ENTERO>  { return new FNodoExpresion(null, null, Constante.TEntero, Constante.TEntero, t.beginLine, t.beginColumn, t.image.substring(1, t.image.length()));}
    | t=<DECIMAL> { return new FNodoExpresion(null, null, Constante.TDecimal, Constante.TDecimal, t.beginLine, t.beginColumn, t.image.substring(1, t.image.length()));}
    
}

FCaso DEFECTO():
{ArrayList<Simbolo> c;}
{
    <T_DEFECTO> <DOSP> c=L_SENTENCIAS() 
    {
        Ambito ambito = new Ambito(Constante.TCaso, c);
        for(Simbolo sim : ambito.TablaSimbolo){
            sim.Ambito.Padre = ambito;
        }
        FCaso caso = new FCaso(null, ambito);
        return caso;
    }
}

Simbolo PARA():
{Token t,t2;; Simbolo dp; FNodoExpresion exp; String c=Constante.TAumento; ArrayList<Simbolo> ls;}
{
    t=<T_PARA> <PAR_IZQ> dp=DECLARACION_PARA() <PCOMA> exp=LOGICA_OR() <PCOMA> (t2=<AUMENTO>|t2=<DECREMENTO>{c=Constante.TDecremento;}) <PAR_DER> <LLAVE_IZQ> ls=L_SENTENCIAS() <LLAVE_DER>
    {
        Ambito ambito = new Ambito(Constante.TPara, ls);
        for(Simbolo sim: ambito.TablaSimbolo){
            sim.Ambito.Padre = ambito;
        }
        FPara fp = new FPara(dp,exp, c, ambito);
        Simbolo s = new Simbolo(Constante.TPara, Constante.TPara, Constante.TPara, fp.Ambito, fp, t.beginLine, t.beginColumn);
        return s;
    }
}

Simbolo DECLARACION_PARA():
{Token t,t2; FNodoExpresion exp;}
{
    t2=<T_DECLARAR> t=<ARROBA> <T_INTEGER> <IGUAL> exp=LOGICA_OR()
    {   
        FDeclaracion fd = new FDeclaracion(Constante.TEntero, t.image.substring(1,t.image.length()), new Ambito(Constante.TDeclaracion, new ArrayList<Simbolo>()), exp, t.beginLine, t.beginColumn); 
        Simbolo s = new Simbolo(Constante.TDeclaracion, Constante.TDeclaracion, Constante.TDeclaracion, new Ambito(Constante.TDeclaracion, new ArrayList<Simbolo>()), fd, t2.beginLine, t2.beginColumn);
        return s;
    }
}

Simbolo MIENTRAS():
{ArrayList<Simbolo> c; FNodoExpresion exp; Token t;}
{
    t=<T_MIENTRAS> <PAR_IZQ> exp=LOGICA_OR() <PAR_DER> <LLAVE_IZQ> c=L_SENTENCIAS() <LLAVE_DER>
    {
        Ambito ambito = new Ambito(Constante.TMientras, c);
        for(Simbolo sim: ambito.TablaSimbolo){
            sim.Ambito.Padre = ambito;
        }
        FMientras m = new FMientras(exp, ambito);
        Simbolo s = new Simbolo(Constante.TMientras, Constante.TMientras, Constante.TMientras, m.Ambito, m, t.beginLine, t.beginColumn);
        return s;
    }
}

void BACKUP():
{}
{
    (<T_BACKUP_USQL> | <T_BACKUP_COMPLETO>) <ID> <ID> <PCOMA>
}

void RESTAURAR():
{}
{
    (<T_RESTAURAR_USQL> | <T_RESTAURAR_COMPLETO>) <CADENA> <PCOMA>
}

void FUNCINES_NATIVAS_VALOR():
{}
{
    <T_FECHA> <PAR_IZQ> <PAR_DER>
    |<T_FECHA_HORA> <PAR_IZQ> <PAR_DER>
    |<T_CONTAR> <PAR_IZQ> <FLECHA_IZQ> SELECCIONAR() <FLECHA_DER> <PAR_DER>
}

FNodoExpresion LLAMADA_OBJETO():
{Token t = null; Token t2 = null; Token t3 = null; ArrayList<FNodoExpresion> le = new ArrayList<FNodoExpresion>();}
{
    //LLAMADA A COLUMNA, TABLA.COLUMNA O FUNCION
    t=<ID> ((<PAR_IZQ> (le=L_EXPRESIONES())? <PAR_DER>)     {
                                                              FLlamadaMetodo lm = new FLlamadaMetodo(t.image, le, t.beginLine, t.beginColumn);
                                                              return new FNodoExpresion(null, null, Constante.TMetodo, Constante.TMetodo, t.beginLine, t.beginColumn, lm);
                                                            }
                                                                    
            | (<PUNTO> t2=<ID>(<PUNTO> t3=<ID>)?))? {
                                                        FLlamadaTabla lt;
                                                        if(t3 != null){
                                                            lt = new FLlamadaTabla(t.image, t2.image, t3.image, t.beginLine, t.beginColumn);
                                                        }else if(t2 != null){
                                                            lt = new FLlamadaTabla(t.image, "", t2.image, t.beginLine, t.beginColumn);
                                                        }else{
                                                            lt = new FLlamadaTabla("", "", t.image, t.beginLine, t.beginColumn);
                                                        }
                                                        return new FNodoExpresion(null, null, Constante.TTabla, Constante.TTabla, t.beginLine, t.beginColumn, lt);
                                                    }
}

ArrayList<FNodoExpresion> L_EXPRESIONES():
{FNodoExpresion exp; ArrayList<FNodoExpresion> le = new ArrayList<FNodoExpresion>(); ArrayList<FNodoExpresion> le2 = new ArrayList<FNodoExpresion>();}
{
    exp = LOGICA_OR() (<COMA> le2=L_EXPRESIONES())? {
                                                        le.add(exp);
                                                        for(FNodoExpresion n : le2){
                                                            le.add(n);
                                                        }
                                                        return le;
                                                    }
}

FNodoExpresion LOGICA_OR():
{FNodoExpresion izq, der; Token t;}
{
    izq = LOGICA_AND() (t = <OR> der = LOGICA_OR() {return new FNodoExpresion(izq, der, Constante.TOr, Constante.TOr, t.beginLine, t.beginColumn, null);})? {return izq;}
}

FNodoExpresion LOGICA_AND():
{FNodoExpresion izq, der; Token t;}
{
    izq = LOGICA_NOT() (t=<AND> der = LOGICA_AND(){return new FNodoExpresion(izq, der, Constante.TAnd, Constante.TAnd, t.beginLine, t.beginColumn, null);})? {return izq;}
}

FNodoExpresion LOGICA_NOT():
{FNodoExpresion der; Token t = null;}
{
    (t=<NOT>)? der = RELACIONAL() {
                                if(t != null){
                                    return new FNodoExpresion(null, der, Constante.TNot, Constante.TNot, t.beginLine, t.beginColumn, null);
                                }else{
                                    return der;
                                }
                            } 
}

FNodoExpresion RELACIONAL():
{FNodoExpresion izq, der; Token t;}
{
    izq = E() (t = <IGUALACION> der = RELACIONAL()      {return new FNodoExpresion(izq, der, Constante.TIgualacion, Constante.TIgualacion, t.beginLine, t.beginColumn, null);}
        | t = <DIFERENCIACION> der = RELACIONAL() {return new FNodoExpresion(izq, der, Constante.TDiferenciacion, Constante.TDiferenciacion, t.beginLine, t.beginColumn, null);}
        | t = <MAYOR> der = RELACIONAL()          {return new FNodoExpresion(izq, der, Constante.TMayor, Constante.TMayor, t.beginLine, t.beginColumn, null);}
        | t = <MENOR> der = RELACIONAL()          {return new FNodoExpresion(izq, der, Constante.TMenor, Constante.TMenor, t.beginLine, t.beginColumn, null);}
        | t = <MAYORIGUAL> der = RELACIONAL()     {return new FNodoExpresion(izq, der, Constante.TMayorIgual, Constante.TMayorIgual, t.beginLine, t.beginColumn, null);}
        | t = <MENORIGUAL> der = RELACIONAL()     {return new FNodoExpresion(izq, der, Constante.TMenorIgual, Constante.TMenorIgual, t.beginLine, t.beginColumn, null);})? {return izq;}
}

FNodoExpresion E():
{FNodoExpresion izq, der; Token t;}
{
    izq=T() (t=<MAS> der=E()    {return new FNodoExpresion(izq, der, Constante.TMas, Constante.TMas, t.beginLine, t.beginColumn, null);}
         | t=<MENOS> der=E(){return new FNodoExpresion(izq, der, Constante.TMenos, Constante.TMenos, t.beginLine, t.beginColumn, null);})? {return izq;}
}

FNodoExpresion T():
{FNodoExpresion izq, der; Token t;}
{
    izq=G() (t=<POR> der=T() {return new FNodoExpresion(izq, der, Constante.TPor, Constante.TPor, t.beginLine, t.beginColumn, null);}
         | t=<DIVISION> der=T(){return new FNodoExpresion(izq, der, Constante.TDivision, Constante.TDivision, t.beginLine, t.beginColumn, null);})? {return izq;}
}

FNodoExpresion G():
{FNodoExpresion der; Token t = null;}
{
    (t=<MENOS>)? der = H() {
                                if(t != null){
                                    return new FNodoExpresion(null, der, Constante.TMenos, Constante.TMenos, t.beginLine, t.beginColumn, null);
                                }else{
                                    return der;
                                }
                            } 
}

FNodoExpresion H():
{FNodoExpresion izq, der; Token t;}
{
    izq = I() (t=<POTENCIA> der=H(){return new FNodoExpresion(izq, der, Constante.TPotencia, Constante.TPotencia, t.beginLine, t.beginColumn, null);})? {return izq;}
}

FNodoExpresion I():
{Token t; Token t2 = null; String c=""; String c2 = ""; FNodoExpresion n;}
{
    t=<CADENA> { return new FNodoExpresion(null, null, Constante.TText, Constante.TText, t.beginLine, t.beginColumn, t.image.substring(1, t.image.length()));}
    | t=<ENTERO>  { return new FNodoExpresion(null, null, Constante.TEntero, Constante.TEntero, t.beginLine, t.beginColumn, t.image.substring(1, t.image.length()));}
    | t=<DECIMAL> { return new FNodoExpresion(null, null, Constante.TDecimal, Constante.TDecimal, t.beginLine, t.beginColumn, t.image.substring(1, t.image.length()));}
    | t=<DATE> t2=<TIME>{c=t.image + " " + t2.image;} { if(!c.equals("")){ return new FNodoExpresion(null, null, Constante.TDateTime, Constante.TDateTime, t.beginLine, t.beginColumn, c);}
                                                        else{
                                                            return new FNodoExpresion(null, null, Constante.TDate, Constante.TDateTime, t.beginLine, t.beginColumn, t.image);
                                                        }
                                                        }  
    | t=<FALSO> { return new FNodoExpresion(null, null, Constante.TBool, Constante.TBool, t.beginLine, t.beginColumn, t.image);}
    | t=<VERDADERO> { return new FNodoExpresion(null, null, Constante.TBool, Constante.TBool, t.beginLine, t.beginColumn, t.image);}
    | t=<ARROBA> (<PUNTO> t2=<ID>)? {
                                        FLlamadaVariable fv;
                                        if(t2 != null){
                                            fv = new FLlamadaVariable(t.image.substring(1, t.image.length()), t2.image, t.beginLine, t.beginColumn);
                                        }else{
                                            fv = new FLlamadaVariable(t.image.substring(1, t.image.length()), "", t.beginLine, t.beginColumn);
                                        }
                                        return new FNodoExpresion(null, null, Constante.TVariable, Constante.TVariable, t.beginLine, t.beginColumn, fv);
                                    }
    | n=LLAMADA_OBJETO() {return n;}
    | FUNCINES_NATIVAS_VALOR()
}