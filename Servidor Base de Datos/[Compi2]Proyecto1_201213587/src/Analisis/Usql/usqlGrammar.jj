options {
LOOKAHEAD=2;
IGNORE_CASE = true;
STATIC = false;
OUTPUT_DIRECTORY="D:\\Titus\\Documents\\Proyectos\\Compiladores 2\\Proyecto 1\\FISQL\\Servidor Base de Datos\\[Compi2]Proyecto1_201213587\\src\\Analisis\\Usql\\";
}

PARSER_BEGIN(usqlGrammar)
package Analisis.Usql;

import Funciones.Usql.*;
import Funciones.XML.*;
import Static.*;
import java.util.ArrayList;
import EjecucionUsql.*;

public class usqlGrammar {
  public static void main(String args[]) throws ParseException {
    usqlGrammar parser = new usqlGrammar(System.in);
    parser.S();
  }
}
PARSER_END(usqlGrammar)

TOKEN:
{    
    <MAS:"+"> {System.out.println(image);}
    |<MENOS:"-"> {System.out.println(image);}
    |<POR:"*"> {System.out.println(image);}
    |<DIVISION:"/"> {System.out.println(image);}
    |<POTENCIA:"^"> {System.out.println(image);}
    |<AUMENTO:"++"> {System.out.println(image);}
    |<DECREMENTO:"--"> {System.out.println(image);}
}

TOKEN:
{
    
    <PAR_IZQ:"(">{System.out.println(image);}
    |<PAR_DER:")">{System.out.println(image);}
    |<LLAVE_IZQ:"{">{System.out.println(image);}
    |<LLAVE_DER:"}">{System.out.println(image);}
    |<COR_IZQ:"[">{System.out.println(image);}
    |<COR_DER:"]">{System.out.println(image);}
    |<PCOMA:";">{System.out.println(image);}
    |<COMA:",">{System.out.println(image);}
    |<DOSP:":">{System.out.println(image);}
    |<IGUAL:"=">{System.out.println(image);}
    |<PUNTO:".">{System.out.println(image);}
    |<FLECHA_IZQ:"<<">{System.out.println(image);}
    |<FLECHA_DER:">>">{System.out.println(image);}
}

TOKEN:
{
  
    <IGUALACION:"=="> {System.out.println(image);}
    |<DIFERENCIACION:"!="> {System.out.println(image);}
    |<MENOR:"<"> {System.out.println(image);}
    |<MAYOR:">"> {System.out.println(image);}
    |<MENORIGUAL:"<="> {System.out.println(image);}
    |<MAYORIGUAL:">="> {System.out.println(image);}  
    |<AND:"&&"> {System.out.println(image);}
    |<OR:"||"> {System.out.println(image);}
    |<NOT:"!"> {System.out.println(image);}

}


TOKEN:
{
  
  <T_TEXT: ("text")> {System.out.println(image);}
  |<T_INTEGER: ("integer")> {System.out.println(image);}
  |<T_DOUBLE: ("double")> {System.out.println(image);}
  |<T_BOOL:("bool")> {System.out.println(image);}
  |<T_DATE: ("date")> {System.out.println(image);}
  |<T_DATETIME: ("datetime")> {System.out.println(image);}
}


TOKEN:
{
  
    <T_CREAR:("crear")> {System.out.println(image);}
    |<T_BASE_DATOS:("base_datos")> {System.out.println(image);}
    |<T_TABLA:("tabla")> {System.out.println(image);}
    |<T_NULO:("nulo")> {System.out.println(image);}
    |<T_NO_NULO:("no nulo")> {System.out.println(image);}
    |<T_AUTOINCREMETABLE:("autoincrementable")> {System.out.println(image);}
    |<T_LLAVE_PRIMARIA:("llave_primaria")> {System.out.println(image);}
    |<T_LLAVE_FORANEA:("llave_foranea")> {System.out.println(image);}
    |<T_OBJETO:("objeto")> {System.out.println(image);}
    |<T_PROCEDIMIENTO:("procedimiento")> {System.out.println(image);}
    |<T_FUNCION:("funcion")> {System.out.println(image);}
    |<T_RETORNO:("retorno")> {System.out.println(image);}
    |<T_USUARIO:("usuario")> {System.out.println(image);}
    |<T_COLOCAR:("colocar")> {System.out.println(image);}
    |<T_PASSWORD:("password")> {System.out.println(image);}
    |<T_USAR:("usar")> {System.out.println(image);}
    |<T_ALTERAR:("alterar")> {System.out.println(image);}
    |<T_AGREGAR:("agregar")> {System.out.println(image);}
    |<T_QUITAR:("quitar")> {System.out.println(image);}
    |<T_CAMBIAR:("cambiar")> {System.out.println(image);}
    |<T_ELIMINAR:("eliminar")> {System.out.println(image);}
    |<T_INSERTAR:("insertar en")> {System.out.println(image);}
    |<T_VALORES:("valores")> {System.out.println(image);}
    |<T_ACTUALIZAR:("actualizar")> {System.out.println(image);}
    |<T_DONDE:("donde")> {System.out.println(image);}
    |<T_BORRAR:("borrar en")> {System.out.println(image);}
    |<T_SELECCIONAR:("seleccionar")> {System.out.println(image);}
    |<T_DE:(("de"))> {System.out.println(image);}
    |<T_ORDENAR:("ordenar por")> {System.out.println(image);}
    |<T_ASC:("asc")> {System.out.println(image);}
    |<T_DESC:("desc")> {System.out.println(image);}
    |<T_OTORGAR:("otorgar permisos")> {System.out.println(image);}
    |<T_DENEGAR:("denegar permisos")> {System.out.println(image);}
    |<T_DECLARAR:(("declarar"))> {System.out.println(image);}
    |<T_SI:(("si"))> {System.out.println(image);}
    |<T_SINO:(("sino"))> {System.out.println(image);}
    |<T_SELECCIONA:(("selecciona"))> {System.out.println(image);}
    |<T_CASO:(("caso"))> {System.out.println(image);}
    |<T_DEFECTO:(("defecto"))> {System.out.println(image);}
    |<T_PARA:(("para"))> {System.out.println(image);}
    |<T_MIENTRAS:(("mientras"))> {System.out.println(image);}
    |<T_DETENER:(("detener"))> {System.out.println(image);}
    |<T_IMPRIMIR:(("imprimir"))> {System.out.println(image);}
    |<T_FECHA:(("fecha"))> {System.out.println(image);}
    |<T_FECHA_HORA:(("fecha_hora"))> {System.out.println(image);}
    |<T_CONTAR:(("contar"))> {System.out.println(image);}
    |<T_BACKUP_USQL:(("backup usqldump"))> {System.out.println(image);}
    |<T_BACKUP_COMPLETO:(("backup completo"))> {System.out.println(image);}
    |<T_RESTAURAR_USQL:(("restaurar usqldump"))> {System.out.println(image);}
    |<T_RESTAURAR_COMPLETO:(("restaurar completo"))> {System.out.println(image);}
}   

TOKEN:
{  
    <CADENA:"\"" (~["\""])*"\""> {System.out.println(image);}
    |<ENTERO: (["0"-"9"])+ > {System.out.println(image);}
    |<FALSO:"falso"> {System.out.println(image);}
    |<VERDADERO:"verdadero"> {System.out.println(image);}
    |<#NUMERO: ["0"-"9"]>
    |<DECIMAL: (<NUMERO>)+(".")(<NUMERO>)+> {System.out.println(image);}
    |<ID: (["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])*> {System.out.println(image);}
    |<ARROBA:"@" (["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])*>{System.out.println(image);}
    |<DATETIME: "'"(("0"["1"-"9"])|(["1"-"2"]["0"-"9"])| ("3" ["0"-"1"] )) "-" (("0"["1"-"9"])| "1"["0"-"2"]) "-" ["0"-"9"]["0"-"9"]["0"-"9"]["0"-"9"] " " ((["0"-"1"]["0"-"9"])| ("2" ["0"-"3"] )) ":" (["0"-"5"]["0"-"9"]) ":" (["0"-"5"]["0"-"9"])"'">{System.out.println(image + "hora");}
    |<DATE: "'"(("0"["1"-"9"])|(["1"-"2"]["0"-"9"])| ("3" ["0"-"1"] )) "-" (("0"["1"-"9"])| "1"["0"-"2"]) "-" ["0"-"9"]["0"-"9"]["0"-"9"]["0"-"9"]"'">{System.out.println( image + " fecha");}

}

SKIP: 
{
  " "
| "\n"
| "\r"
| "\t"
}

SPECIAL_TOKEN:
{
    <COMENTARIO_LINEA: "#" (~["\n"])*>{System.out.println(image);}
    |<COMENTARIO_MULTI: "#*" (~["*"])* "*#">{System.out.println(image);}
}

EjecucionUsql S():
{ArrayList<Simbolo> s = new ArrayList<Simbolo>();}
{   {System.out.println("Comienza!!");}
    (s=L_INSTRUCCION()) ?
    
    {System.out.println("Exito!!");}
    {return new EjecucionUsql(s);}
}

ArrayList<Simbolo> L_INSTRUCCION():
{ArrayList<Simbolo> l = new ArrayList<Simbolo>(); ArrayList<Simbolo> l2 = new ArrayList<Simbolo>();}
{
    l=INSTRUCCION() (l2=L_INSTRUCCION())? 
    {
        for(Simbolo sim : l2){
            l.add(sim);
        }
        return l;
    }
}

ArrayList<Simbolo> INSTRUCCION() :
{ArrayList<Simbolo> l = new ArrayList<Simbolo>(); Simbolo s;}
{    
    l=DDL() {return l;}
    | l=DML() {return l;}
    | l=DCL() {return l;}
    | l=SSL() {return l;}//quitar ssl
    | l=DECLARACION() {return l;}    
    | LLAMADA_METODO() {return l;}
    | s=IMPRIMIR() {l.add(s); return l;}
}


Simbolo IMPRIMIR():
{Token t; FNodoExpresion exp;}
{
    t=<T_IMPRIMIR> <PAR_IZQ> exp=LOGICA_OR() <PAR_DER> <PCOMA> 
    {
        FImprimir f = new FImprimir(exp);
        Simbolo s = new Simbolo(Constante.TImprimir, Constante.TImprimir, Constante.TImprimir, f.Ambito, f, t.beginLine, t.beginColumn);
        return s;
    }
}



ArrayList<Simbolo> DDL():
{ArrayList<Simbolo> ls = new ArrayList<Simbolo>(); Simbolo s; Token t,t2;}
{
    t2=<T_USAR> t=<ID> <PCOMA> {FUsarBaseDatos ub = new FUsarBaseDatos(t.image, new Ambito(t.image, new ArrayList<Simbolo>()), t2.beginLine, t2.beginColumn);
                                Simbolo sim = new Simbolo(Constante.TUsarBaseDatos, Constante.TUsarBaseDatos, Constante.TUsarBaseDatos, ub.Ambito, ub, ub.Fila, ub.Columna);
                                ls.add(sim);
                                return ls;
    }
    |s=CREATE() {ls.add(s); return ls;}
    |s=ALTER() {ls.add(s); return ls;}
    |s=ELIMINAR() {ls.add(s); return ls;}
    |BACKUP()
    |RESTAURAR()
}

ArrayList<Simbolo> DML():
{ArrayList<Simbolo> ls = new ArrayList<Simbolo>(); Simbolo s=null;}
{
    (s=INSERTAR()
    |ACTUALIZAR()
    |BORRAR()
    |s=SELECCIONAR()){ls.add(s); return ls;}
}

ArrayList<Simbolo> DCL():
{}
{
    <T_OTORGAR> <ID> <COMA> <ID> <PUNTO> (<POR> | <ID>) <PCOMA>
    |<T_DENEGAR> <ID> <COMA> <ID> <PUNTO> (<POR> | <ID>) <PCOMA> {return null;}
}

ArrayList<Simbolo> SSL():
{ArrayList<Simbolo> ls = new ArrayList<Simbolo>(); Simbolo s; Token t;}
{
    ls=DECLARACION(){return ls;}
    |s=ASIGNACION() {ls.add(s); return ls;}
    |s=SI()   {ls.add(s); return ls;}
    |s=SELECCIONA()   {ls.add(s); return ls;}
    |s=PARA() {ls.add(s); return ls;}
    |s=MIENTRAS() {ls.add(s); return ls;}
    |t=<T_DETENER> <PCOMA>    {ls.add(new Simbolo(Constante.TDetener,Constante.TDetener, Constante.TDetener, new Ambito(Constante.TDetener, new ArrayList<Simbolo>()), null, t.beginLine, t.beginColumn)); return ls;}
    |s=IMPRIMIR() {ls.add(s); return ls;}
    |s=RETORNO() <PCOMA>  {ls.add(s); return ls;}
    |s=LLAMADA_METODO() {ls.add(s); return ls;}
}

Simbolo LLAMADA_METODO():
{Token t; ArrayList<FNodoExpresion> le = new ArrayList<FNodoExpresion>();}
{
    t=<ID> <PAR_IZQ> (le=L_EXPRESIONES())? <PAR_DER> <PCOMA>
      {
        FLlamadaMetodo lm = new FLlamadaMetodo(t.image, le, t.beginLine, t.beginColumn);
        return new Simbolo(Constante.TLlamadaMetodo, Constante.TLlamadaMetodo, Constante.TLlamadaMetodo, new Ambito(Constante.TLlamadaMetodo, new ArrayList<Simbolo>()), lm, t.beginLine, t.beginColumn);
      }
}

Simbolo CREATE():
{Token t; FCrearBaseDatos cb; FCrearTabla ct; FCrearUsuario cu; FMetodo cm; FCrearObjeto co;}
{
    t=<T_CREAR> (((cb=CREATE_BASE() {cb.Fila = t.beginLine; cb.Columna = t.beginColumn; return new Simbolo(Constante.TCrearBaseDatos, Constante.TCrearBaseDatos, Constante.TCrearBaseDatos, cb.Ambito, cb, cb.Fila, cb.Columna);}
                | ct=CREATE_TABLA() {ct.Fila = t.beginLine; ct.Columna = t.beginColumn; return new Simbolo(Constante.TCrearTabla, Constante.TCrearTabla, Constante.TCrearTabla, ct.Ambito, ct, ct.Fila, ct.Columna);}
                | co=CREATE_OBJETO()   {co.Fila = t.beginLine; co.Columna = t.beginColumn; return new Simbolo(Constante.TCrearObjeto, Constante.TCrearObjeto, Constante.TCrearObjeto, co.Ambito, co, co.Fila, co.Columna);}    
                | cu=CREATE_USUARIO() {cu.Fila = t.beginLine; cu.Columna = t.beginColumn; return new Simbolo(Constante.TCrearUsuario, Constante.TCrearUsuario, Constante.TCrearUsuario, cu.Ambito, cu, cu.Fila, cu.Columna);}) 
            <PCOMA>) 
                | cm=CREATE_PROCEDIMIENTO() {cm.Fila = t.beginLine; cm.Columna = t.beginColumn; return new Simbolo(cm.Tipo, cm.Nombre, Constante.TMetodo, cm.Ambito, cm, cm.Fila, cm.Columna);}
                | cm=CREATE_FUNCION()   {cm.Fila = t.beginLine; cm.Columna = t.beginColumn; return new Simbolo(cm.Tipo, cm.Nombre, Constante.TMetodo, cm.Ambito, cm, cm.Fila, cm.Columna);}                
                )                
}

FCrearBaseDatos CREATE_BASE():
{Token t, t2;}
{
    t=<T_BASE_DATOS> t2=<ID> {
                                return new FCrearBaseDatos(t2.image, new Ambito(t2.image, new ArrayList<Simbolo>()), t.beginLine, t.beginColumn);                                
                             } 
}

FCrearTabla CREATE_TABLA():
{Token t,t2; ArrayList<ColumnaEstructura> lce;}
{
    t=<T_TABLA> t2=<ID> <PAR_IZQ> lce=L_CAMPO() <PAR_DER>
    {
        return new FCrearTabla(t2.image, new Ambito(t2.image, new ArrayList<Simbolo>()), lce, t.beginLine, t.beginColumn);
    }
}

ArrayList<ColumnaEstructura> L_CAMPO():
{ArrayList<ColumnaEstructura> lce = new ArrayList<ColumnaEstructura>(); ColumnaEstructura ce,ce2;}
{
    ce=CAMPO() {lce.add(ce);} (<COMA> ce2=CAMPO(){lce.add(ce2);})*{return lce;}
}

ColumnaEstructura CAMPO():
{String tipo; Token t; Complemento c = new Complemento(); ColumnaEstructura ce = new ColumnaEstructura();}
{
    tipo=TIPO_DATO() t=<ID> (c=L_COMPLEMENTO())? 
        {
            if(tipo.equals(Tools.ttext) || tipo.equals(Tools.tinteger) || tipo.equals(Tools.tdouble) || tipo.equals(Tools.tbool) || tipo.equals(Tools.tdate) || tipo.equals(Tools.tdatetime)){
                ce.Tipo = 0;
                ce.NombreCampo = t.image;
                ce.TipoCampo = tipo;
            }else{
                ce.Tipo = 1;
                ce.NombreCampo = t.image;
                ce.TipoCampo = tipo;
            }   
            ce.Complementos = c;
            return ce;
        }
}

String TIPO_DATO():
{Token t;}
{
    <T_TEXT>    {return Tools.ttext;}
    |<T_INTEGER> {return Tools.tinteger;}
    |<T_DOUBLE>   {return Tools.tdouble;}
    |<T_BOOL> {return Tools.tbool;}
    |<T_DATE> {return Tools.tdate;}
    |<T_DATETIME> {return Tools.tdatetime;}
    |t=<ID> {return t.image;}
}

Complemento L_COMPLEMENTO():
{Complemento c; Complemento c2;}
{
    c=COMPLEMENTO() (c2=L_COMPLEMENTO(){
                                        if(c2.isNulo) c.isNulo = true;
                                        if(c2.isAutoincrementable) c.isAutoincrementable = true;
                                        if(c2.isPrimary) c.isPrimary = true;
                                        if(c2.isForanea) c.isForanea = true;
                                        if(c2.isForanea) c.Foranea = c2.Foranea;
                                        })?
    {return c;}
}

Complemento COMPLEMENTO():
{Complemento com = new Complemento(); Token t;}
{
    (<T_NULO> {com.isNulo = false;}
    |<T_NO_NULO> {com.isNulo = true;}
    |<T_AUTOINCREMETABLE> {com.isAutoincrementable = true;}
    |<T_LLAVE_PRIMARIA> {com.isPrimary = true;}
    |<T_LLAVE_FORANEA> t=<ID> {com.isForanea = true; com.Foranea = t.image;})
    {return com;}
}

FCrearObjeto CREATE_OBJETO():
{Token t; ArrayList<Parametro> lp;}
{
    <T_OBJETO> t=<ID> <PAR_IZQ> lp=L_ATRIBUTO() <PAR_DER> {return new FCrearObjeto(t.image, lp, new Ambito(t.image, new ArrayList<Simbolo>()), t.beginLine, t.beginColumn);}
}

ArrayList<Parametro> L_ATRIBUTO():
{ArrayList<Parametro> lp = new ArrayList<Parametro>(); ArrayList<Parametro> lp2 = new ArrayList<Parametro>();}
{
    lp=ATRIBUTO() (<COMA> lp2=L_ATRIBUTO(){
                    for(int i=0; i < lp2.size(); i++){
                        lp.add(lp2.get(i));
                    }
                }
            )? {return lp;}
}

ArrayList<Parametro> ATRIBUTO():
{String tipo; Token t; ArrayList<Parametro> lp = new ArrayList<Parametro>();}
{
    tipo=TIPO_DATO_ATRIBUTO() t=<ID> {lp.add(new Parametro(tipo, t.image)); return lp;}
}

String TIPO_DATO_ATRIBUTO():
{}
{
    <T_TEXT> {return Constante.TCadena;}
    |<T_INTEGER> {return Constante.TEntero;}
    |<T_DOUBLE> {return Constante.TDecimal;}
    |<T_BOOL>   {return Constante.TBool;}
    |<T_DATE>   {return Constante.TDate;}
    |<T_DATETIME>   {return Constante.TDateTime;}
}

FMetodo CREATE_PROCEDIMIENTO():
{Token t; ArrayList<Simbolo> ls; ArrayList<Simbolo> lp = new ArrayList<Simbolo>();}
{
    <T_PROCEDIMIENTO> t=<ID> <PAR_IZQ> (lp=L_PARAMETRO())? <PAR_DER> <LLAVE_IZQ>  ls=L_SENTENCIAS()  <LLAVE_DER>
    {
        Ambito ambito = new Ambito(t.image, ls);
        for(Simbolo sim : ambito.TablaSimbolo){
            sim.Ambito.Padre = ambito;
        }
        for(Simbolo sim : lp){
            sim.Ambito.Padre = ambito;
        }
        
        return new FMetodo(lp, ambito, t.beginLine, t.beginColumn, Constante.TVacio, t.image);
    }
}

ArrayList<Simbolo> L_PARAMETRO():
{ArrayList<Simbolo> l; ArrayList<Simbolo> l2 = new ArrayList<Simbolo>();}
{
    l=PARAMETRO() (<COMA> l2=L_PARAMETRO(){
                    for(int i=0; i < l2.size(); i++){
                        l.add(l2.get(i));
                    }
                }
            )? {return l;}
}

ArrayList<Simbolo> PARAMETRO():
{String tipo; Token t;}
{
    tipo=TIPO_DATO() t=<ARROBA> 
    {
        FDeclaracion fd = new FDeclaracion(tipo, t.image.substring(1, t.image.length()), new Ambito(Constante.TDeclaracion, new ArrayList<Simbolo>()), null, t.beginLine, t.beginColumn);
        Simbolo s = new Simbolo(fd.Tipo, fd.Nombre, Constante.TDeclaracion, fd.Ambito, fd, fd.Fila, fd.Columna);
        ArrayList<Simbolo> lista = new ArrayList<Simbolo>();
        lista.add(s);
        return lista;
    }
}

FMetodo CREATE_FUNCION():
{Token t; String tipo; ArrayList<Simbolo> ls; ArrayList<Simbolo> lp = new ArrayList<Simbolo>();}
{
    <T_FUNCION> t=<ID> <PAR_IZQ> (lp=L_PARAMETRO())? <PAR_DER> tipo=TIPO_DATO() <LLAVE_IZQ>  ls=L_SENTENCIAS()  <LLAVE_DER>
    {
        Ambito ambito = new Ambito(t.image, ls);
        for(Simbolo sim : ambito.TablaSimbolo){
            sim.Ambito.Padre = ambito;
        }
        for(Simbolo sim : lp){
            sim.Ambito.Padre = ambito;
        }
        
        return new FMetodo(lp, ambito, t.beginLine, t.beginColumn, tipo, t.image);
    }
}

FCrearUsuario CREATE_USUARIO():
{Token t, t2;}
{
    <T_USUARIO> t=<ID> <T_COLOCAR> <T_PASSWORD> <IGUAL> t2=<CADENA>
    {
        FCrearUsuario usr = new FCrearUsuario(t.image, t2.image.substring(1, t2.image.length() - 1), new Ambito(Constante.TCrearUsuario, new ArrayList<Simbolo>()), t.beginLine, t.beginColumn);
        return usr;
    }
}

Simbolo RETORNO():
{FNodoExpresion exp; Token t;}
{
    t=<T_RETORNO> exp=LOGICA_OR() {return new Simbolo(Constante.TRetorno, Constante.TRetorno, Constante.TRetorno, new Ambito(Constante.TRetorno, new ArrayList<Simbolo>()), exp, t.beginLine, t.beginColumn);}
}

Simbolo ALTER():
{Token t; FAlterarTabla at; FAlterarUsuario au;}
{
    t=<T_ALTERAR> (at=ALTER_TABLA() {at.Fila = t.beginLine; at.Columna = t.beginColumn; return new Simbolo(Constante.TAlterarTabla, Constante.TAlterarTabla, Constante.TAlterarTabla, at.Ambito, at, at.Fila, at.Columna);}
                | au=ALTER_USUARIO() {au.Fila = t.beginLine; au.Columna = t.beginColumn; return new Simbolo(Constante.TAlterarUsuario, Constante.TAlterarUsuario, Constante.TAlterarUsuario, au.Ambito, au, au.Fila, au.Columna);} 
                | ALTER_OBJETO()
                ) <PCOMA>         
}

FAlterarTabla ALTER_TABLA():
{Token t, t2; ArrayList<ColumnaEstructura> lc;}
{
    <T_TABLA> t=<ID> (t2=<T_AGREGAR> <PAR_IZQ> lc=L_CAMPO() <PAR_DER>
    {
        return new FAlterarTabla(Constante.TAgregar, t.image, new Ambito(t.image, new ArrayList<Simbolo>()), lc, t.beginLine, t.beginColumn);
    }
    |<T_QUITAR> lc=L_ID()
    {
        return new FAlterarTabla(Constante.TQuitar, t.image, new Ambito(t.image, new ArrayList<Simbolo>()), lc, t.beginLine, t.beginColumn);
    }
    )
}

ArrayList<ColumnaEstructura> L_ID():
{Token t, t2; ArrayList<ColumnaEstructura> lce = new ArrayList<ColumnaEstructura>();}
{
    t=<ID> {ColumnaEstructura ce = new ColumnaEstructura();
            ce.NombreCampo = t.image;
            ce.Fila = t.beginLine;
            ce.Columna = t.beginColumn;
            lce.add(ce);}   (<COMA> t2=<ID> {ColumnaEstructura ce2 = new ColumnaEstructura();
                                            ce2.NombreCampo = t2.image;
                                            ce2.Fila = t2.beginLine;
                                            ce2.Columna = t2.beginColumn;
                                            lce.add(ce2);})* {return lce;}
}

void ALTER_OBJETO():
{}
{
    <T_OBJETO> <ID> (<T_AGREGAR> <PAR_IZQ> L_ATRIBUTO() <PAR_DER>
    |<T_QUITAR> L_ID())
}

FAlterarUsuario ALTER_USUARIO():
{Token t, t2;}
{
    <T_USUARIO> t=<ID> <T_CAMBIAR> <T_PASSWORD> <IGUAL> t2=<CADENA>
    {
        return new FAlterarUsuario(t.image, t2.image.substring(1, t2.image.length() - 1), new Ambito(t.image, new ArrayList<Simbolo>()), t.beginLine, t.beginColumn);
    }
}


Simbolo ELIMINAR():
{Token t, t2;}
{
    t2=<T_ELIMINAR> (<T_TABLA> t=<ID> 
                    | <T_BASE_DATOS>  t=<ID>
                    | <T_OBJETO> t=<ID>
                    | <T_USUARIO> t=<ID>{
                                            FEliminarUsuario eu = new FEliminarUsuario(t.image, new Ambito(t.image, new ArrayList<Simbolo>()), t2.beginLine, t2.beginColumn);
                                            return new Simbolo(Constante.TEliminarUsuario, Constante.TEliminarUsuario, Constante.TEliminarUsuario, eu.Ambito, eu, eu.Fila, eu.Columna);
                                        })      
            <PCOMA>
}



Simbolo INSERTAR():
{Token t,t2; ArrayList<FNodoExpresion> le; ArrayList<ColumnaEstructura> lid = new ArrayList<ColumnaEstructura>();}
{
    t2=<T_INSERTAR> <T_TABLA> t=<ID> <PAR_IZQ> (lid=L_ID() <PAR_DER> <T_VALORES> <PAR_IZQ>)? le=L_EXPRESIONES() <PAR_DER> <PCOMA>
    {
        if(lid.size()>0){
            FInsertarEspecial te = new FInsertarEspecial(t.image, lid, le, new Ambito(t.image, new ArrayList<Simbolo>()), t2.beginLine, t2.beginColumn);
            return new Simbolo(Constante.TInsertarEspecial, Constante.TInsertarEspecial, Constante.TInsertarEspecial, te.Ambito, te, te.Fila, te.Columna);
        }else{
            FInsertarNormal tn = new FInsertarNormal(t.image, le, new Ambito(t.image, new ArrayList<Simbolo>()), t2.beginLine, t2.beginColumn);
            return new Simbolo(Constante.TInsertarNormal, Constante.TInsertarNormal, Constante.TInsertarNormal, tn.Ambito, tn, tn.Fila, tn.Columna);
        }        
    }
}

void ACTUALIZAR():
{}
{
    <T_ACTUALIZAR> <T_TABLA> <ID> <PAR_IZQ> L_ID() <PAR_DER> <T_VALORES> <PAR_IZQ> L_EXPRESIONES() <PAR_DER> (<T_DONDE> LOGICA_OR())? <PCOMA>
}

void BORRAR():
{}
{
    <T_BORRAR> <T_TABLA> <ID> (<T_DONDE> LOGICA_OR())? <PCOMA>
}

Simbolo SELECCIONAR():
{Token t=null,t2=null,t3=null, t4=null, t5=null, t6=null; String Tipo=""; ArrayList<FLlamadaTabla> lcs = new ArrayList<FLlamadaTabla>(); ArrayList<ColumnaEstructura> lce = new ArrayList<ColumnaEstructura>(); FNodoExpresion nodo; String Ordenar = "", por=""; }
{
    
    t=<T_SELECCIONAR> {nodo = new FNodoExpresion(null, null, Constante.TBool, Constante.TBool, t.beginLine, t.beginColumn, Constante.TVerdadero);} (lcs=L_ID_S() | t2=<POR> {Tipo = Constante.TPor;}) <T_DE> lce=L_ID() (<T_DONDE> nodo=LOGICA_OR())? (<T_ORDENAR> t3=<ID>(<PUNTO> <ID>( <PUNTO> <ID>)?)? {Ordenar = t3.image;} (t4=<T_ASC>{por = Constante.TAsc;}|t4=<T_DESC>{por = Constante.TDesc;}))?
    {
        FLlamadaTabla a = null;
        if(t6 != null){
            a = new FLlamadaTabla(t3.image, t5.image, t6.image, t3.beginLine, t3.beginColumn);
        }else if(t5 != null){
            a = new FLlamadaTabla(t3.image, "", t5.image, t3.beginLine, t3.beginColumn);
        }else if(t3 != null){
            a = new FLlamadaTabla("", "", t3.image, t3.beginLine, t3.beginColumn);
        }
        FSeleccionar se = new FSeleccionar(Tipo, lcs, lce, nodo, a, por, new Ambito(t.image, new ArrayList<Simbolo>()), t.beginLine, t.beginColumn);
        return new Simbolo(Constante.TSeleccionar, Constante.TSeleccionar, Constante.TSeleccionar, se.Ambito, se, se.Fila, se.Columna);
    }
}

ArrayList<FLlamadaTabla> L_ID_S():
{Token t=null, t2=null, t3=null ,t4=null , t5=null, t6=null; ArrayList<FLlamadaTabla> lce = new ArrayList<FLlamadaTabla>();}
{
    t=<ID>(<PUNTO> t2=<ID> (<PUNTO> t3=<ID>)?)? {

                if(t3 != null){
                    FLlamadaTabla cs = new FLlamadaTabla(t.image, t2.image, t3.image, t.beginLine, t.beginColumn);
                    lce.add(cs);
                }else if(t2 != null){
                    FLlamadaTabla cs = new FLlamadaTabla(t.image, "", t2.image, t.beginLine, t.beginColumn);
                    lce.add(cs);
                }else{
                    FLlamadaTabla cs = new FLlamadaTabla("", "", t.image, t.beginLine, t.beginColumn);
                    lce.add(cs);
                }
    }
            (<COMA> t2=<ID> (<PUNTO> <ID> (<PUNTO> <ID>)?)? {

                if(t6 != null){
                    FLlamadaTabla cs = new FLlamadaTabla(t4.image, t5.image, t6.image, t4.beginLine, t4.beginColumn);
                    lce.add(cs);
                }else if(t5 != null){
                    FLlamadaTabla cs = new FLlamadaTabla(t4.image, "", t5.image, t4.beginLine, t4.beginColumn);
                    lce.add(cs);
                }else{
                    FLlamadaTabla cs = new FLlamadaTabla("", "", t4.image, t4.beginLine, t4.beginColumn);
                    lce.add(cs);
                }
    }) {return lce;}
}

ArrayList<Simbolo> L_SENTENCIAS():
{ArrayList<Simbolo> ls = new ArrayList<Simbolo>();}
{
    (ls=L_SENTENCIA())? {return ls;}
}

ArrayList<Simbolo> L_SENTENCIA():
{ArrayList<Simbolo> ls = new ArrayList<Simbolo>(); ArrayList<Simbolo> ls2 = new ArrayList<Simbolo>();}
{
    ls=SENTENCIA() (ls2=L_SENTENCIA())?

    {
        for(Simbolo sim : ls2){
            ls.add(sim);
        }
        return ls;
    }
}

ArrayList<Simbolo> SENTENCIA():
{ArrayList<Simbolo> l = new ArrayList<Simbolo>();}
{
    (l=SSL() {return l;}
    |l=DML() {return l;}
    |l=DCL()){return l;}
}



ArrayList<Simbolo> DECLARACION():
{ArrayList<FDeclaracion> lv = new ArrayList<FDeclaracion>(); Token t,t2; String td; FNodoExpresion val = null;}
{
    t2=<T_DECLARAR> lv= L_VARIABLE() ((td=TIPO_DATO_ATRIBUTO() (<IGUAL> val = LOGICA_OR())?)
                    | t=<ID> {td = t.image;}) <PCOMA> {
                                                        ArrayList<Simbolo> lista = new ArrayList<Simbolo>();
                                                        for(FDeclaracion d : lv){
                                                            d.Tipo = td;
                                                            d.Valor = val;
                                                            Simbolo s = new Simbolo(d.Tipo, d.Nombre, Constante.TDeclaracion, new Ambito(Constante.TDeclaracion, new ArrayList<Simbolo>()), d, t2.beginLine, t2.beginColumn);
                                                            lista.add(s);                                                            
                                                        }
                                                        return lista;
                                                      }
}

ArrayList<FDeclaracion> L_VARIABLE():
{ArrayList<FDeclaracion> lv = new ArrayList<FDeclaracion>(); ArrayList<FDeclaracion> lv2 = new ArrayList<FDeclaracion>(); Token t;}
{
    t=<ARROBA> {lv.add(new FDeclaracion("", t.image.substring(1, t.image.length()), new Ambito(Constante.TDeclaracion, new ArrayList<Simbolo>()), null, t.beginLine, t.beginColumn));} (<COMA> lv2=L_VARIABLE()
                                                                                    {
                                                                                        for(FDeclaracion s : lv2){
                                                                                            lv.add(s);
                                                                                        }
                                                                                    }
                                                                                    )? {return lv;} 
}

Simbolo ASIGNACION():
{Token t; Token t2 = null; FNodoExpresion e;}
{
    t=<ARROBA> (<PUNTO> t2=<ID>)? <IGUAL> e=LOGICA_OR() <PCOMA> {
                                                                    FLlamadaVariable fv;
                                                                    if(t2 != null){
                                                                        fv = new FLlamadaVariable(t2.image, t.image.substring(1, t.image.length()), t.beginLine, t.beginColumn);
                                                                    }else{
                                                                        fv = new FLlamadaVariable(t.image.substring(1, t.image.length()), "", t.beginLine, t.beginColumn);
                                                                    }

                                                                    FAsignacion as = new FAsignacion(fv, new Ambito(Constante.TAsignacion, new ArrayList<Simbolo>()), e, t.beginLine, t.beginColumn);
                                                                    return new Simbolo(Constante.TAsignacion, Constante.TAsignacion, Constante.TAsignacion, as.Ambito, as, t.beginLine, t.beginColumn);
                                                                }
}

Simbolo SI():
{Token t; FNodoExpresion condicion; ArrayList<Simbolo> asi = new ArrayList<Simbolo>(); ArrayList<Simbolo> asino = new ArrayList<Simbolo>();}
{
    t=<T_SI> <PAR_IZQ> condicion=LOGICA_OR() <PAR_DER> <LLAVE_IZQ> asi=L_SENTENCIAS()  <LLAVE_DER> (<T_SINO> <LLAVE_IZQ> asino=L_SENTENCIAS() <LLAVE_DER>)?
    {
        Ambito ambitosi = new Ambito(Constante.TSi, asi);
        Ambito ambitosino = new Ambito(Constante.TSi, asino);
        Ambito ambito = new Ambito(Constante.TSi, new ArrayList<Simbolo>());
        
        for(Simbolo sim: ambitosi.TablaSimbolo){
            sim.Ambito.Padre = ambito;
        }

        for(Simbolo sim: ambitosino.TablaSimbolo){
            sim.Ambito.Padre = ambito;
        } 

        FSi fs = new FSi(condicion, ambitosi, ambitosino, ambito);
        Simbolo s = new Simbolo(Constante.TSi, Constante.TSi, Constante.TSi, fs.Ambito, fs, t.beginLine, t.beginColumn);
        return s;
    }
}

Simbolo SELECCIONA():
{Token t; FNodoExpresion exp; ArrayList<FCaso> lc = new ArrayList<FCaso>(); FCaso defecto= null;}
{
    t=<T_SELECCIONA> <PAR_IZQ> exp=LOGICA_OR() <PAR_DER> <LLAVE_IZQ> lc=L_CASOS() (defecto=DEFECTO())? <LLAVE_DER>
    {
        Ambito ambito = new Ambito(Constante.TSeleccion, new ArrayList<Simbolo>());
        for(FCaso caso: lc){
            for(Simbolo sim: caso.Ambito.TablaSimbolo){
                sim.Ambito.Padre = ambito;
            }
        }
        if(defecto != null){
            for(Simbolo sim: defecto.Ambito.TablaSimbolo){
                    sim.Ambito.Padre = ambito;
            }
        }
        FSelecciona fs = new FSelecciona(exp,lc,defecto,ambito);
        Simbolo s = new Simbolo(Constante.TSeleccion, Constante.TSeleccion, Constante.TSeleccion, fs.Ambito, fs, t.beginLine, t.beginColumn);
        return s;
    }
}

ArrayList<FCaso> L_CASOS():
{Token t; FNodoExpresion p; ArrayList<Simbolo> ls; ArrayList<FCaso> lc2 = new ArrayList<FCaso>();}
{
    t=<T_CASO> p=VALOR_CASO() <DOSP> ls=L_SENTENCIAS() (lc2=L_CASOS())?
    {
        Ambito ambito = new Ambito(Constante.TCaso, ls);
        for(Simbolo sim : ambito.TablaSimbolo){
            sim.Ambito.Padre = ambito;
        }
        FCaso caso = new FCaso(p, ambito);
        ArrayList<FCaso> lc = new ArrayList<FCaso>();
        lc.add(caso);

        for(FCaso ca : lc2){
            lc.add(ca);
        }

        return lc;        
    }
}

FNodoExpresion VALOR_CASO():
{Token t;}
{
    t=<CADENA> { return new FNodoExpresion(null, null, Constante.TText, Constante.TText, t.beginLine, t.beginColumn, t.image.substring(1, t.image.length()));}
    | t=<ENTERO>  { return new FNodoExpresion(null, null, Constante.TEntero, Constante.TEntero, t.beginLine, t.beginColumn, t.image);}
    | t=<DECIMAL> { return new FNodoExpresion(null, null, Constante.TDecimal, Constante.TDecimal, t.beginLine, t.beginColumn, t.image);}
}

FCaso DEFECTO():
{ArrayList<Simbolo> c;}
{
    <T_DEFECTO> <DOSP> c=L_SENTENCIAS() 
    {
        Ambito ambito = new Ambito(Constante.TCaso, c);
        for(Simbolo sim : ambito.TablaSimbolo){
            sim.Ambito.Padre = ambito;
        }
        FCaso caso = new FCaso(null, ambito);
        return caso;
    }
}

Simbolo PARA():
{Token t,t2;; Simbolo dp; FNodoExpresion exp; String c=Constante.TAumento; ArrayList<Simbolo> ls;}
{
    t=<T_PARA> <PAR_IZQ> dp=DECLARACION_PARA() <PCOMA> exp=LOGICA_OR() <PCOMA> (t2=<AUMENTO>|t2=<DECREMENTO>{c=Constante.TDecremento;}) <PAR_DER> <LLAVE_IZQ> ls=L_SENTENCIAS() <LLAVE_DER>
    {
        Ambito ambito = new Ambito(Constante.TPara, ls);
        for(Simbolo sim: ambito.TablaSimbolo){
            sim.Ambito.Padre = ambito;
        }
        FPara fp = new FPara(dp,exp, c, ambito);
        Simbolo s = new Simbolo(Constante.TPara, Constante.TPara, Constante.TPara, fp.Ambito, fp, t.beginLine, t.beginColumn);
        return s;
    }
}

Simbolo DECLARACION_PARA():
{Token t,t2; FNodoExpresion exp;}
{
    t2=<T_DECLARAR> t=<ARROBA> <T_INTEGER> <IGUAL> exp=LOGICA_OR()
    {   
        FDeclaracion fd = new FDeclaracion(Constante.TEntero, t.image.substring(1,t.image.length()), new Ambito(Constante.TDeclaracion, new ArrayList<Simbolo>()), exp, t.beginLine, t.beginColumn); 
        Simbolo s = new Simbolo(fd.Tipo, fd.Nombre, Constante.TDeclaracion, new Ambito(Constante.TDeclaracion, new ArrayList<Simbolo>()), fd, t2.beginLine, t2.beginColumn);
        return s;
    }
}

Simbolo MIENTRAS():
{ArrayList<Simbolo> c; FNodoExpresion exp; Token t;}
{
    t=<T_MIENTRAS> <PAR_IZQ> exp=LOGICA_OR() <PAR_DER> <LLAVE_IZQ> c=L_SENTENCIAS() <LLAVE_DER>
    {
        Ambito ambito = new Ambito(Constante.TMientras, c);
        for(Simbolo sim: ambito.TablaSimbolo){
            sim.Ambito.Padre = ambito;
        }
        FMientras m = new FMientras(exp, ambito);
        Simbolo s = new Simbolo(Constante.TMientras, Constante.TMientras, Constante.TMientras, m.Ambito, m, t.beginLine, t.beginColumn);
        return s;
    }
}

void BACKUP():
{}
{
    (<T_BACKUP_USQL> | <T_BACKUP_COMPLETO>) <ID> <ID> <PCOMA>
}

void RESTAURAR():
{}
{
    (<T_RESTAURAR_USQL> | <T_RESTAURAR_COMPLETO>) <CADENA> <PCOMA>
}

void FUNCINES_NATIVAS_VALOR():
{}
{
    <T_FECHA> <PAR_IZQ> <PAR_DER>
    |<T_FECHA_HORA> <PAR_IZQ> <PAR_DER>
    |<T_CONTAR> <PAR_IZQ> <FLECHA_IZQ> SELECCIONAR() <FLECHA_DER> <PAR_DER>
}

FNodoExpresion LLAMADA_OBJETO():
{Token t = null; Token t2 = null; Token t3 = null; ArrayList<FNodoExpresion> le = new ArrayList<FNodoExpresion>();}
{
    //LLAMADA A COLUMNA, TABLA.COLUMNA O FUNCION
    t=<ID> ((<PAR_IZQ> (le=L_EXPRESIONES())? <PAR_DER>)     {
                                                              FLlamadaMetodo lm = new FLlamadaMetodo(t.image, le, t.beginLine, t.beginColumn);
                                                              return new FNodoExpresion(null, null, Constante.TMetodo, Constante.TMetodo, t.beginLine, t.beginColumn, lm);
                                                            }
                                                                    
            | (<PUNTO> t2=<ID>(<PUNTO> t3=<ID>)?))? {
                                                        FLlamadaTabla lt;
                                                        if(t3 != null){
                                                            lt = new FLlamadaTabla(t.image, t2.image, t3.image, t.beginLine, t.beginColumn);
                                                        }else if(t2 != null){
                                                            lt = new FLlamadaTabla(t.image, "", t2.image, t.beginLine, t.beginColumn);
                                                        }else{
                                                            lt = new FLlamadaTabla("", "", t.image, t.beginLine, t.beginColumn);
                                                        }
                                                        return new FNodoExpresion(null, null, Constante.TTabla, Constante.TTabla, t.beginLine, t.beginColumn, lt);
                                                    }
}

ArrayList<FNodoExpresion> L_EXPRESIONES():
{FNodoExpresion exp; ArrayList<FNodoExpresion> le = new ArrayList<FNodoExpresion>(); ArrayList<FNodoExpresion> le2 = new ArrayList<FNodoExpresion>();}
{
    exp = LOGICA_OR() (<COMA> le2=L_EXPRESIONES())? {
                                                        le.add(exp);
                                                        for(FNodoExpresion n : le2){
                                                            le.add(n);
                                                        }
                                                        return le;
                                                    }
}

FNodoExpresion LOGICA_OR():
{FNodoExpresion izq, der; Token t; FNodoExpresion nuevo = null;}
{
    izq = LOGICA_AND() (t = <OR> der = LOGICA_AND() {nuevo = new FNodoExpresion(izq, der, Constante.TOr, Constante.TOr, t.beginLine, t.beginColumn, null);})* {if(nuevo == null){
                                        return izq;
                                    }else{
                                        return nuevo;
                                    }}
}

FNodoExpresion LOGICA_AND():
{FNodoExpresion izq, der; Token t; FNodoExpresion nuevo = null;}
{
    izq = LOGICA_NOT() (t=<AND> der = LOGICA_NOT(){nuevo = new FNodoExpresion(izq, der, Constante.TAnd, Constante.TAnd, t.beginLine, t.beginColumn, null);})* {if(nuevo == null){
                                        return izq;
                                    }else{
                                        return nuevo;
                                    }}
}

FNodoExpresion LOGICA_NOT():
{FNodoExpresion der; Token t = null;}
{
    (t=<NOT>)? der = RELACIONAL() {
                                if(t != null){
                                    return new FNodoExpresion(null, der, Constante.TNot, Constante.TNot, t.beginLine, t.beginColumn, null);
                                }else{
                                    return der;
                                }
                            } 
}

FNodoExpresion RELACIONAL():
{FNodoExpresion izq, der; Token t; FNodoExpresion nuevo = null;}
{
    izq = E() (t = <IGUALACION> der = E()      {if(nuevo != null){
                                                    nuevo = new FNodoExpresion(nuevo, der, Constante.TIgualacion, Constante.TIgualacion, t.beginLine, t.beginColumn, null);
                                                }else{
                                                    nuevo = new FNodoExpresion(izq, der, Constante.TIgualacion, Constante.TIgualacion, t.beginLine, t.beginColumn, null);
                                                }}
        | t = <DIFERENCIACION> der = E() {if(nuevo != null){
                                                    nuevo = new FNodoExpresion(nuevo, der, Constante.TDiferenciacion, Constante.TDiferenciacion, t.beginLine, t.beginColumn, null);
                                                }else{
                                                    nuevo = new FNodoExpresion(izq, der, Constante.TDiferenciacion, Constante.TDiferenciacion, t.beginLine, t.beginColumn, null);
                                                }}
        | t = <MAYOR> der = E()          {if(nuevo != null){
                                                    nuevo = new FNodoExpresion(nuevo, der, Constante.TMayor, Constante.TMayor, t.beginLine, t.beginColumn, null);
                                                }else{
                                                    nuevo = new FNodoExpresion(izq, der, Constante.TMayor, Constante.TMayor, t.beginLine, t.beginColumn, null);
                                                }}
        | t = <MENOR> der = E()          {if(nuevo != null){
                                                    nuevo = new FNodoExpresion(nuevo, der, Constante.TMenor, Constante.TMenos, t.beginLine, t.beginColumn, null);
                                                }else{
                                                    nuevo = new FNodoExpresion(izq, der, Constante.TMenor, Constante.TMenos, t.beginLine, t.beginColumn, null);
                                                }}
        | t = <MAYORIGUAL> der = E()     {if(nuevo != null){
                                                    nuevo = new FNodoExpresion(nuevo, der, Constante.TMayorIgual, Constante.TMayorIgual, t.beginLine, t.beginColumn, null);
                                                }else{
                                                    nuevo = new FNodoExpresion(izq, der, Constante.TMayorIgual, Constante.TMayorIgual, t.beginLine, t.beginColumn, null);
                                                }}
        | t = <MENORIGUAL> der = E()     {if(nuevo != null){
                                                    nuevo = new FNodoExpresion(nuevo, der, Constante.TMenorIgual, Constante.TMenorIgual, t.beginLine, t.beginColumn, null);
                                                }else{
                                                    nuevo = new FNodoExpresion(izq, der, Constante.TMenorIgual, Constante.TMenorIgual, t.beginLine, t.beginColumn, null);
                                                }})* {if(nuevo == null){
                                        return izq;
                                    }else{
                                        return nuevo;
                                    }}
}

FNodoExpresion E():
{FNodoExpresion izq, der; Token t; FNodoExpresion nuevo = null;}
{
    izq=T() ((t=<MAS> der=T()    
                                            {
                                                if(nuevo != null){
                                                    nuevo = new FNodoExpresion(nuevo, der, Constante.TMas, Constante.TMas, t.beginLine, t.beginColumn, null);
                                                }else{
                                                    nuevo = new FNodoExpresion(izq, der, Constante.TMas, Constante.TMas, t.beginLine, t.beginColumn, null);
                                                }
                                            })
        | (t=<MENOS> der=T(){
                                if(nuevo != null){
                                    nuevo = new FNodoExpresion(nuevo, der, Constante.TMenos, Constante.TMenos, t.beginLine, t.beginColumn, null);
                                }else{
                                    nuevo = new FNodoExpresion(izq, der, Constante.TMenos, Constante.TMenos, t.beginLine, t.beginColumn, null);
                                }
                            }))* {if(nuevo == null){
                                        return izq;
                                    }else{
                                        return nuevo;
                                    }
                                    }
}

FNodoExpresion T():
{FNodoExpresion izq, der; Token t; FNodoExpresion nuevo = null;}
{
    izq=G() (t=<POR> der=G() {if(nuevo != null){
                                                    nuevo = new FNodoExpresion(nuevo, der, Constante.TPor, Constante.TPor, t.beginLine, t.beginColumn, null);
                                                }else{
                                                    nuevo = new FNodoExpresion(izq, der, Constante.TPor, Constante.TPor, t.beginLine, t.beginColumn, null);
                                                }}
         | t=<DIVISION> der=G(){if(nuevo != null){
                                                    nuevo = new FNodoExpresion(nuevo, der, Constante.TDivision, Constante.TDivision, t.beginLine, t.beginColumn, null);
                                                }else{
                                                    nuevo = new FNodoExpresion(izq, der, Constante.TDivision, Constante.TDivision, t.beginLine, t.beginColumn, null);
                                                }})* {if(nuevo == null){
                                        return izq;
                                    }else{
                                        return nuevo;
                                    }}
}

FNodoExpresion G():
{FNodoExpresion der; Token t = null; FNodoExpresion nuevo = null;}
{
    (t=<MENOS>)? der = H() {
                                if(t != null){
                                    return new FNodoExpresion(null, der, Constante.TMenos, Constante.TMenos, t.beginLine, t.beginColumn, null);
                                }else{
                                    return der;
                                }
                            } 
}

FNodoExpresion H():
{FNodoExpresion izq, der; Token t; FNodoExpresion nuevo = null;}
{
    izq = I() (t=<POTENCIA> der=I(){nuevo = new FNodoExpresion(izq, der, Constante.TPotencia, Constante.TPotencia, t.beginLine, t.beginColumn, null);})* {if(nuevo == null){
                                        return izq;
                                    }else{
                                        return nuevo;
                                    }}
}

FNodoExpresion I():
{Token t; Token t2 = null; String c=""; String c2 = ""; FNodoExpresion n;}
{
    t=<CADENA> { return new FNodoExpresion(null, null, Constante.TText, Constante.TText, t.beginLine, t.beginColumn, t.image.substring(1, t.image.length() - 1));}
    | t=<ENTERO>  { return new FNodoExpresion(null, null, Constante.TEntero, Constante.TEntero, t.beginLine, t.beginColumn, t.image);}
    | t=<DECIMAL> { return new FNodoExpresion(null, null, Constante.TDecimal, Constante.TDecimal, t.beginLine, t.beginColumn, t.image);}
    | t=<DATE>  {return new FNodoExpresion(null, null, Constante.TDate, Constante.TDateTime, t.beginLine, t.beginColumn, t.image.substring(1, t.image.length() - 1));}
    | t=<DATETIME> { return new FNodoExpresion(null, null, Constante.TDateTime, Constante.TDateTime, t.beginLine, t.beginColumn, t.image.substring(1, t.image.length() - 1));}
    | t=<FALSO> { return new FNodoExpresion(null, null, Constante.TBool, Constante.TBool, t.beginLine, t.beginColumn, t.image);}
    | t=<VERDADERO> { return new FNodoExpresion(null, null, Constante.TBool, Constante.TBool, t.beginLine, t.beginColumn, t.image);}
    | t=<ARROBA> (<PUNTO> t2=<ID>)? {
                                        FLlamadaVariable fv;
                                        if(t2 != null){
                                            fv = new FLlamadaVariable(t2.image, t.image.substring(1, t.image.length()), t.beginLine, t.beginColumn);
                                        }else{
                                            fv = new FLlamadaVariable(t.image.substring(1, t.image.length()), "", t.beginLine, t.beginColumn);
                                        }
                                        return new FNodoExpresion(null, null, Constante.TVariable, Constante.TVariable, t.beginLine, t.beginColumn, fv);
                                    }
    | n=LLAMADA_OBJETO() {return n;}
    | <PAR_IZQ> n=LOGICA_OR() <PAR_DER> {return n;}
    | FUNCINES_NATIVAS_VALOR()
}