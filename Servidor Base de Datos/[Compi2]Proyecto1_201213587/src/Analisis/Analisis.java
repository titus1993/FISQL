/* Generated By:JavaCC: Do not edit this line. Analisis.java */
package Analisis;

public class Analisis implements AnalisisConstants {
  public static void main(String args[]) throws ParseException {
    Analisis parser = new Analisis(System.in);
    parser.S();
    System.out.println("Exito!!");
  }

  final public void S() throws ParseException {
    DDL();
  }

  final public void DDL() throws ParseException {
    CREATE();
  }

  final public void CREATE() throws ParseException {
    jj_consume_token(T_CREAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_BASE_DATOS:
    case T_TABLA:
    case T_OBJETO:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case T_BASE_DATOS:
        CREATE_BASE();
        break;
      case T_TABLA:
        CREATE_TABLA();
        break;
      case T_OBJETO:
        CREATE_OBJETO();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(PCOMA);
      break;
    case T_PROCEDIMIENTO:
      CREATE_PROCEDIMIENTO();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CREATE_BASE() throws ParseException {
    jj_consume_token(T_BASE_DATOS);
    jj_consume_token(ID);
  }

  final public void CREATE_TABLA() throws ParseException {
    jj_consume_token(T_TABLA);
    jj_consume_token(ID);
    jj_consume_token(PAR_IZQ);
    L_CAMPO();
    jj_consume_token(PAR_DER);
  }

  final public void L_CAMPO() throws ParseException {
    CAMPO();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMA:
      jj_consume_token(COMA);
      L_CAMPO();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  final public void CAMPO() throws ParseException {
    TIPO_DATO();
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_NULO:
    case T_NO_NULO:
    case T_AUTOINCREMETABLE:
    case T_LLAVE_PRIMARIA:
    case T_LLAVE_FORANEA:
      L_COMPLEMENTO();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  final public void TIPO_DATO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_TEXT:
      jj_consume_token(T_TEXT);
      break;
    case T_INTEGER:
      jj_consume_token(T_INTEGER);
      break;
    case T_DOUBLE:
      jj_consume_token(T_DOUBLE);
      break;
    case T_BOOL:
      jj_consume_token(T_BOOL);
      break;
    case T_DATE:
      jj_consume_token(T_DATE);
      break;
    case T_DATETIME:
      jj_consume_token(T_DATETIME);
      break;
    case ID:
      jj_consume_token(ID);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void L_COMPLEMENTO() throws ParseException {
    COMPLEMENTO();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_NULO:
    case T_NO_NULO:
    case T_AUTOINCREMETABLE:
    case T_LLAVE_PRIMARIA:
    case T_LLAVE_FORANEA:
      L_COMPLEMENTO();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  final public void COMPLEMENTO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_NULO:
      jj_consume_token(T_NULO);
      break;
    case T_NO_NULO:
      jj_consume_token(T_NO_NULO);
      break;
    case T_AUTOINCREMETABLE:
      jj_consume_token(T_AUTOINCREMETABLE);
      break;
    case T_LLAVE_PRIMARIA:
      jj_consume_token(T_LLAVE_PRIMARIA);
      break;
    case T_LLAVE_FORANEA:
      jj_consume_token(T_LLAVE_FORANEA);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CREATE_OBJETO() throws ParseException {
    jj_consume_token(T_OBJETO);
    jj_consume_token(ID);
    jj_consume_token(PAR_IZQ);
    L_ATRIBUTO();
    jj_consume_token(PAR_DER);
  }

  final public void L_ATRIBUTO() throws ParseException {
    ATRIBUTO();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMA:
      jj_consume_token(COMA);
      L_ATRIBUTO();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  final public void ATRIBUTO() throws ParseException {
    TIPO_DATO_ATRIBUTO();
    jj_consume_token(ID);
  }

  final public void TIPO_DATO_ATRIBUTO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_TEXT:
      jj_consume_token(T_TEXT);
      break;
    case T_INTEGER:
      jj_consume_token(T_INTEGER);
      break;
    case T_DOUBLE:
      jj_consume_token(T_DOUBLE);
      break;
    case T_BOOL:
      jj_consume_token(T_BOOL);
      break;
    case T_DATE:
      jj_consume_token(T_DATE);
      break;
    case T_DATETIME:
      jj_consume_token(T_DATETIME);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CREATE_PROCEDIMIENTO() throws ParseException {
    jj_consume_token(T_PROCEDIMIENTO);
    jj_consume_token(ID);
    jj_consume_token(PAR_IZQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_TEXT:
    case T_INTEGER:
    case T_DOUBLE:
    case T_BOOL:
    case T_DATE:
    case T_DATETIME:
    case ID:
      L_PARAMETRO();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(PAR_DER);
    jj_consume_token(LLAVE_IZQ);
    jj_consume_token(LLAVE_DER);
  }

  final public void L_PARAMETRO() throws ParseException {
    PARAMETRO();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMA:
      jj_consume_token(COMA);
      L_PARAMETRO();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  final public void PARAMETRO() throws ParseException {
    TIPO_DATO();
    jj_consume_token(ARROBA);
    jj_consume_token(ID);
  }

  final public void E() throws ParseException {
    T();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAS:
    case MENOS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
        jj_consume_token(MAS);
        E();
        break;
      case MENOS:
        jj_consume_token(MENOS);
        E();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  final public void T() throws ParseException {
    G();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POR:
    case DIVISION:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POR:
        jj_consume_token(POR);
        T();
        break;
      case DIVISION:
        jj_consume_token(DIVISION);
        T();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  final public void G() throws ParseException {
    H();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POTENCIA:
      jj_consume_token(POTENCIA);
      G();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  final public void H() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CADENA:
      jj_consume_token(CADENA);
      break;
    case ENTERO:
      jj_consume_token(ENTERO);
      break;
    case DECIMAL:
      jj_consume_token(DECIMAL);
      break;
    case ARROBA:
      jj_consume_token(ARROBA);
      jj_consume_token(ID);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public AnalisisTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x20000,0x0,0xc0000000,0x0,0x0,0x20000,0xc0000000,0xc0000000,0x20000,0x6,0x6,0x18,0x18,0x20,0x100000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1060,0x3060,0x0,0xf80,0xf,0xf80,0xf80,0x0,0xf,0xf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x2c00000,};
   }

  /** Constructor with InputStream. */
  public Analisis(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Analisis(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalisisTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Analisis(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalisisTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Analisis(AnalisisTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalisisTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[95];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 95; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
