/* objGrammar.java */
/* Generated By:JavaCC: Do not edit this line. objGrammar.java */
package Analisis.XML.Objeto;

import Funciones.XML.*;
import Static.*;
import java.util.ArrayList;

public class objGrammar implements objGrammarConstants {
  public static void main(String args[]) throws ParseException {
    objGrammar parser = new objGrammar(System.in);
    parser.S();
  }

  final public ArrayList<Objeto> S() throws ParseException {ArrayList<Objeto> o = new ArrayList<Objeto>();
System.out.println("Comienza!!");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_OBJ_IZQ:{
      o = L_OBJ();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
{if ("" != null) return o;}
System.out.println("Exito!!");
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<Objeto> L_OBJ() throws ParseException {ArrayList<Objeto> o = new ArrayList<Objeto>(); ArrayList<Objeto> o2 = new ArrayList<Objeto>();
    o = OBJ();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_OBJ_IZQ:{
      o2 = L_OBJ();
for(int i=0; i < o2.size(); i++){
                        o.add(o2.get(i));
                    }
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
{if ("" != null) return o;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<Objeto> OBJ() throws ParseException {String n; ArrayList<Parametro> p = new ArrayList<Parametro>();
    jj_consume_token(T_OBJ_IZQ);
    n = NOMBRE();
    jj_consume_token(T_ATTR_IZQ);
    p = L_ATTR();
    jj_consume_token(T_ATTR_DER);
    jj_consume_token(T_OBJ_DER);
ArrayList<Objeto> obj = new ArrayList<Objeto>();
        obj.add(new Objeto(n, p));
        {if ("" != null) return obj;}
    throw new Error("Missing return statement in function");
  }

  final public String NOMBRE() throws ParseException {Token t;
    jj_consume_token(T_NOMBRE_IZQ);
    t = jj_consume_token(ID);
    jj_consume_token(T_NOMBRE_DER);
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<Parametro> L_ATTR() throws ParseException {ArrayList<Parametro> p = new ArrayList<Parametro>(); ArrayList<Parametro> p2 = new ArrayList<Parametro>();
    p = ATTR();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_TEXT_IZQ:
    case T_INTEGER_IZQ:
    case T_DOUBLE_IZQ:
    case T_BOOL_IZQ:
    case T_DATE_IZQ:
    case T_DATETIME_IZQ:{
      p2 = L_ATTR();
for(int i=0; i < p2.size(); i++){
                        p.add(p2.get(i));
                    }
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
{if ("" != null) return p;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<Parametro> ATTR() throws ParseException {ArrayList<Parametro> p = new ArrayList<Parametro>(); Token c;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_TEXT_IZQ:{
      jj_consume_token(T_TEXT_IZQ);
      c = jj_consume_token(ID);
p.add(new Parametro(Tools.ttext, c.image));
      jj_consume_token(T_TEXT_DER);
      break;
      }
    case T_INTEGER_IZQ:{
      jj_consume_token(T_INTEGER_IZQ);
      c = jj_consume_token(ID);
p.add(new Parametro(Tools.tinteger, c.image));
      jj_consume_token(T_INTEGER_DER);
      break;
      }
    case T_DOUBLE_IZQ:{
      jj_consume_token(T_DOUBLE_IZQ);
      c = jj_consume_token(ID);
p.add(new Parametro(Tools.tdouble, c.image));
      jj_consume_token(T_DOUBLE_DER);
      break;
      }
    case T_BOOL_IZQ:{
      jj_consume_token(T_BOOL_IZQ);
      c = jj_consume_token(ID);
p.add(new Parametro(Tools.tbool, c.image));
      jj_consume_token(T_BOOL_DER);
      break;
      }
    case T_DATE_IZQ:{
      jj_consume_token(T_DATE_IZQ);
      c = jj_consume_token(ID);
p.add(new Parametro(Tools.tdate, c.image));
      jj_consume_token(T_DATE_DER);
      break;
      }
    case T_DATETIME_IZQ:{
      jj_consume_token(T_DATETIME_IZQ);
      c = jj_consume_token(ID);
p.add(new Parametro(Tools.tdatetime, c.image));
      jj_consume_token(T_DATETIME_DER);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return p;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public objGrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2,0x2,0x1f80,0x1f80,};
   }

  /** Constructor with InputStream. */
  public objGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public objGrammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new objGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public objGrammar(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new objGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public objGrammar(objGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(objGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[26];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 26; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
