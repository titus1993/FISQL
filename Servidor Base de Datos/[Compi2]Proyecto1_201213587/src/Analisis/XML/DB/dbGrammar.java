/* dbGrammar.java */
/* Generated By:JavaCC: Do not edit this line. dbGrammar.java */
package Analisis.XML.DB;

import Funciones.XML.*;
import Static.*;
import java.util.ArrayList;

public class dbGrammar implements dbGrammarConstants {
  public static void main(String args[]) throws ParseException {
    dbGrammar parser = new dbGrammar(System.in);
    parser.S();
  }

  final public DataBase S() throws ParseException {DataBase b;
System.out.println("Comienza!!");
    b = DB();
System.out.println("Exito!!");
    {if ("" != null) return b;}
    throw new Error("Missing return statement in function");
  }

  final public DataBase DB() throws ParseException {String p,f,o; ArrayList<Tabla> t = new ArrayList<Tabla>();
    p = PROCEDURE();
    f = FUNCION();
    o = OBJECT();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_TABLA_IZQ:{
      t = L_TABLA();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
DataBase d = new DataBase(p, f, o, t); {if ("" != null) return d;}
    throw new Error("Missing return statement in function");
  }

  final public String PROCEDURE() throws ParseException {String t;
    jj_consume_token(T_PROCEDURE_IZQ);
    t = PATH();
    jj_consume_token(T_PROCEDURE_DER);
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  final public String FUNCION() throws ParseException {String t;
    jj_consume_token(T_FUNCION_IZQ);
    t = PATH();
    jj_consume_token(T_FUNCION_DER);
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  final public String OBJECT() throws ParseException {String t;
    jj_consume_token(T_OBJECT_IZQ);
    t = PATH();
    jj_consume_token(T_OBJECT_DER);
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  final public String PATH() throws ParseException {Token t;
    jj_consume_token(T_PATH_IZQ);
    t = jj_consume_token(CADENA);
    jj_consume_token(T_PATH_DER);
{if ("" != null) return t.image.substring(1, t.image.length() - 1).trim();}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<Tabla> L_TABLA() throws ParseException {ArrayList<Tabla> c = new ArrayList<Tabla>();
ArrayList<Tabla> c2 = new ArrayList<Tabla>();
    c = TABLA();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_TABLA_IZQ:{
      c2 = L_TABLA();
for(int i=0; i < c2.size(); i++){
                        c.add(c2.get(i));
                    }
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
{if ("" != null) return c;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<Tabla> TABLA() throws ParseException {String n, p; ArrayList<ColumnaEstructura> ce;
    jj_consume_token(T_TABLA_IZQ);
    n = NOMBRE();
    p = PATH();
    ce = ROWS();
    jj_consume_token(T_TABLA_DER);
Tabla t = new Tabla(n, p, ce);
        ArrayList<Tabla> l = new ArrayList<Tabla>();
        l.add(t);
            {if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public String NOMBRE() throws ParseException {Token t;
    jj_consume_token(T_NOMBRE_IZQ);
    t = jj_consume_token(CADENA);
    jj_consume_token(T_NOMBRE_DER);
{if ("" != null) return t.image.substring(1, t.image.length() - 1).trim();}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<ColumnaEstructura> ROWS() throws ParseException {ArrayList<ColumnaEstructura> c;
    jj_consume_token(T_ROWS_IZQ);
    c = L_CAMPOS();
    jj_consume_token(T_ROWS_DER);
{if ("" != null) return c;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<ColumnaEstructura> L_CAMPOS() throws ParseException {ArrayList<ColumnaEstructura> c = new ArrayList<ColumnaEstructura>();
ArrayList<ColumnaEstructura> c2 = new ArrayList<ColumnaEstructura>();
    c = CAMPO();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_CAMPO_IZQ:{
      c2 = L_CAMPOS();
for(int i=0; i < c2.size(); i++){
                        c.add(c2.get(i));
                    }
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
{if ("" != null) return c;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<ColumnaEstructura> CAMPO() throws ParseException {Token t,i; Complemento c = new Complemento(); ColumnaEstructura ce = new ColumnaEstructura();
    jj_consume_token(T_CAMPO_IZQ);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_INTEGER_IZQ:{
      jj_consume_token(T_INTEGER_IZQ);
      t = jj_consume_token(CADENA);
      jj_consume_token(T_INTEGER_DER);
ce.Tipo = 0; ce.NombreCampo = t.image.substring(1, t.image.length() - 1).trim(); ce.TipoCampo = Tools.tinteger;
      break;
      }
    case T_TEXT_IZQ:{
      jj_consume_token(T_TEXT_IZQ);
      t = jj_consume_token(CADENA);
      jj_consume_token(T_TEXT_DER);
ce.Tipo = 0; ce.NombreCampo = t.image.substring(1, t.image.length() - 1).trim(); ce.TipoCampo = Tools.ttext;
      break;
      }
    case T_DOUBLE_IZQ:{
      jj_consume_token(T_DOUBLE_IZQ);
      t = jj_consume_token(CADENA);
      jj_consume_token(T_DOUBLE_DER);
ce.Tipo = 0; ce.NombreCampo = t.image.substring(1, t.image.length() - 1).trim(); ce.TipoCampo = Tools.tdouble;
      break;
      }
    case T_BOOL_IZQ:{
      jj_consume_token(T_BOOL_IZQ);
      t = jj_consume_token(CADENA);
      jj_consume_token(T_BOOL_DER);
ce.Tipo = 0; ce.NombreCampo = t.image.substring(1, t.image.length() - 1).trim(); ce.TipoCampo = Tools.tbool;
      break;
      }
    case T_DATE_IZQ:{
      jj_consume_token(T_DATE_IZQ);
      t = jj_consume_token(CADENA);
      jj_consume_token(T_DATE_DER);
ce.Tipo = 0; ce.NombreCampo = t.image.substring(1, t.image.length() - 1).trim(); ce.TipoCampo = Tools.tdate;
      break;
      }
    case T_DATETIME_IZQ:{
      jj_consume_token(T_DATETIME_IZQ);
      t = jj_consume_token(CADENA);
      jj_consume_token(T_DATETIME_DER);
ce.Tipo = 0; ce.NombreCampo = t.image.substring(1, t.image.length() - 1).trim(); ce.TipoCampo = Tools.tdatetime;
      break;
      }
    case ID_IZQ:{
      i = jj_consume_token(ID_IZQ);
      t = jj_consume_token(CADENA);
      jj_consume_token(ID_DER);
ce.Tipo = 1; ce.NombreCampo = t.image.substring(1, t.image.length() - 1).trim(); ce.TipoCampo = i.image.substring(1, i.image.length() - 1).trim();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_COMPLEMENTO_IZQ:{
      c = L_COMPLEMENTO();
ce.Complementos = c;
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(T_CAMPO_DER);
ArrayList<ColumnaEstructura> l = new ArrayList<ColumnaEstructura>();
        l.add(ce);
        {if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Complemento L_COMPLEMENTO() throws ParseException {Complemento c; Complemento c2;
    c = COMPLEMENTO();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_COMPLEMENTO_IZQ:{
      c2 = L_COMPLEMENTO();
c.isNulo = c2.isNulo;
                                        c.isAutoincrementable = c2.isAutoincrementable;
                                        c.isPrimary = c2.isPrimary;
                                        c.isForanea = c2.isForanea;
                                        c.Foranea = c2.Foranea;
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
{if ("" != null) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Complemento COMPLEMENTO() throws ParseException {String c; Complemento com = new Complemento();
    jj_consume_token(T_COMPLEMENTO_IZQ);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case T_NULO:{
      jj_consume_token(T_NULO);
com.isNulo = true;
      break;
      }
    case T_NO_NULO:{
      jj_consume_token(T_NO_NULO);
com.isNulo = false;
      break;
      }
    case T_AUTOINCREMETABLE:{
      jj_consume_token(T_AUTOINCREMETABLE);
com.isAutoincrementable = true;
      break;
      }
    case T_LLAVE_PRIMARIA:{
      jj_consume_token(T_LLAVE_PRIMARIA);
com.isPrimary = true;
      break;
      }
    case T_FORANEA_IZQ:{
      c = FORANEA();
com.isForanea = true; com.Foranea = c;
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(T_COMPLEMENTO_DER);
{if ("" != null) return com;}
    throw new Error("Missing return statement in function");
  }

  final public String FORANEA() throws ParseException {Token t;
    jj_consume_token(T_FORANEA_IZQ);
    t = jj_consume_token(CADENA);
    jj_consume_token(T_FORANEA_DER);
{if ("" != null) return t.image.substring(1,t.image.length() - 1).trim();}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public dbGrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2,0x2,0x200,0x7e000000,0x100,0x100,0xf80000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x40,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public dbGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public dbGrammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new dbGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public dbGrammar(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new dbGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public dbGrammar(dbGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(dbGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[44];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
