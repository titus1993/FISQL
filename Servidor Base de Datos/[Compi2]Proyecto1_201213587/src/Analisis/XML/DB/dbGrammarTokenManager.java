/* dbGrammarTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. dbGrammarTokenManager.java */
package Analisis.XML.DB;
import Funciones.XML.*;
import Static.*;
import java.util.ArrayList;

/** Token Manager. */
@SuppressWarnings("unused")public class dbGrammarTokenManager implements dbGrammarConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x80000L) != 0L)
            return 339;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 60:
         return jjStartNfaWithStates_0(0, 19, 339);
      case 62:
         return jjStopAtPos(0, 20);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x600000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0xa00000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 79:
      case 111:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(3, 21);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 79:
      case 111:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(6, 22);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x1800000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x1800000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(13, 24);
         return jjMoveStringLiteralDfa14_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(16, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 339;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 339:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(334, 335); }
                  else if (curChar == 32)
                     { jjCheckNAddTwoStates(332, 333); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(327, 328); }
                  else if (curChar == 47)
                     { jjCheckNAddTwoStates(316, 326); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(314, 315); }
                  else if (curChar == 47)
                     { jjCheckNAddTwoStates(307, 313); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(305, 306); }
                  else if (curChar == 47)
                     { jjCheckNAddTwoStates(298, 304); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(296, 297); }
                  else if (curChar == 47)
                     { jjCheckNAddTwoStates(287, 295); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(285, 286); }
                  else if (curChar == 47)
                     { jjCheckNAddTwoStates(275, 284); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(273, 274); }
                  else if (curChar == 47)
                     { jjCheckNAddTwoStates(266, 272); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(264, 265); }
                  else if (curChar == 47)
                     { jjCheckNAddTwoStates(203, 212); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(253, 263); }
                  else if (curChar == 47)
                     { jjCheckNAddTwoStates(183, 190); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(246, 252); }
                  else if (curChar == 47)
                     { jjCheckNAddTwoStates(167, 180); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(239, 245); }
                  else if (curChar == 47)
                     { jjCheckNAddTwoStates(158, 164); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(230, 238); }
                  else if (curChar == 47)
                     { jjCheckNAddTwoStates(147, 155); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(220, 229); }
                  else if (curChar == 47)
                     { jjCheckNAddTwoStates(135, 144); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(213, 219); }
                  else if (curChar == 47)
                     { jjCheckNAddTwoStates(121, 132); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(201, 202); }
                  else if (curChar == 47)
                     { jjCheckNAddTwoStates(110, 118); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(191, 200); }
                  else if (curChar == 47)
                     { jjCheckNAddTwoStates(101, 107); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(181, 182); }
                  else if (curChar == 47)
                     { jjCheckNAddTwoStates(91, 98); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(165, 166); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(156, 157); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(145, 146); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(133, 134); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(119, 120); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(108, 109); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(99, 100); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(89, 90); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(81, 88); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(67, 80); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(60, 66); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(51, 59); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(41, 50); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(29, 40); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(20, 28); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(13, 19); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(5, 12); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(3); }
                  }
                  else if (curChar == 60)
                     { jjCheckNAddStates(0, 67); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 34 && kind > 39)
                     kind = 39;
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAdd(3); }
                  break;
               case 4:
                  if (curChar == 60)
                     { jjCheckNAddStates(0, 67); }
                  break;
               case 5:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(5, 12); }
                  break;
               case 7:
                  if (curChar == 32)
                     { jjAddStates(68, 69); }
                  break;
               case 8:
                  if (curChar == 62 && kind > 1)
                     kind = 1;
                  break;
               case 13:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(13, 19); }
                  break;
               case 15:
                  if (curChar == 32)
                     { jjAddStates(70, 71); }
                  break;
               case 16:
                  if (curChar == 62 && kind > 2)
                     kind = 2;
                  break;
               case 20:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(20, 28); }
                  break;
               case 22:
                  if (curChar == 32)
                     { jjAddStates(72, 73); }
                  break;
               case 23:
                  if (curChar == 62 && kind > 3)
                     kind = 3;
                  break;
               case 29:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(29, 40); }
                  break;
               case 31:
                  if (curChar == 32)
                     { jjAddStates(74, 75); }
                  break;
               case 32:
                  if (curChar == 62 && kind > 4)
                     kind = 4;
                  break;
               case 41:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(41, 50); }
                  break;
               case 43:
                  if (curChar == 32)
                     { jjAddStates(76, 77); }
                  break;
               case 44:
                  if (curChar == 62 && kind > 5)
                     kind = 5;
                  break;
               case 51:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(51, 59); }
                  break;
               case 53:
                  if (curChar == 32)
                     { jjAddStates(78, 79); }
                  break;
               case 54:
                  if (curChar == 62 && kind > 6)
                     kind = 6;
                  break;
               case 60:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(60, 66); }
                  break;
               case 62:
                  if (curChar == 32)
                     { jjAddStates(80, 81); }
                  break;
               case 63:
                  if (curChar == 62 && kind > 7)
                     kind = 7;
                  break;
               case 67:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(67, 80); }
                  break;
               case 69:
                  if (curChar == 32)
                     { jjAddStates(82, 83); }
                  break;
               case 70:
                  if (curChar == 62 && kind > 8)
                     kind = 8;
                  break;
               case 81:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(81, 88); }
                  break;
               case 83:
                  if (curChar == 32)
                     { jjAddStates(84, 85); }
                  break;
               case 84:
                  if (curChar == 62 && kind > 9)
                     kind = 9;
                  break;
               case 89:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(89, 90); }
                  break;
               case 90:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(91, 98); }
                  break;
               case 91:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(91, 98); }
                  break;
               case 93:
                  if (curChar == 32)
                     { jjAddStates(86, 87); }
                  break;
               case 94:
                  if (curChar == 62 && kind > 10)
                     kind = 10;
                  break;
               case 99:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(99, 100); }
                  break;
               case 100:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(101, 107); }
                  break;
               case 101:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(101, 107); }
                  break;
               case 103:
                  if (curChar == 32)
                     { jjAddStates(88, 89); }
                  break;
               case 104:
                  if (curChar == 62 && kind > 11)
                     kind = 11;
                  break;
               case 108:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(108, 109); }
                  break;
               case 109:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(110, 118); }
                  break;
               case 110:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(110, 118); }
                  break;
               case 112:
                  if (curChar == 32)
                     { jjAddStates(90, 91); }
                  break;
               case 113:
                  if (curChar == 62 && kind > 12)
                     kind = 12;
                  break;
               case 119:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(119, 120); }
                  break;
               case 120:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(121, 132); }
                  break;
               case 121:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(121, 132); }
                  break;
               case 123:
                  if (curChar == 32)
                     { jjAddStates(92, 93); }
                  break;
               case 124:
                  if (curChar == 62 && kind > 13)
                     kind = 13;
                  break;
               case 133:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(133, 134); }
                  break;
               case 134:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(135, 144); }
                  break;
               case 135:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(135, 144); }
                  break;
               case 137:
                  if (curChar == 32)
                     { jjAddStates(94, 95); }
                  break;
               case 138:
                  if (curChar == 62 && kind > 14)
                     kind = 14;
                  break;
               case 145:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(145, 146); }
                  break;
               case 146:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(147, 155); }
                  break;
               case 147:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(147, 155); }
                  break;
               case 149:
                  if (curChar == 32)
                     { jjAddStates(96, 97); }
                  break;
               case 150:
                  if (curChar == 62 && kind > 15)
                     kind = 15;
                  break;
               case 156:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(156, 157); }
                  break;
               case 157:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(158, 164); }
                  break;
               case 158:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(158, 164); }
                  break;
               case 160:
                  if (curChar == 32)
                     { jjAddStates(98, 99); }
                  break;
               case 161:
                  if (curChar == 62 && kind > 16)
                     kind = 16;
                  break;
               case 165:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(165, 166); }
                  break;
               case 166:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(167, 180); }
                  break;
               case 167:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(167, 180); }
                  break;
               case 169:
                  if (curChar == 32)
                     { jjAddStates(100, 101); }
                  break;
               case 170:
                  if (curChar == 62 && kind > 17)
                     kind = 17;
                  break;
               case 181:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(181, 182); }
                  break;
               case 182:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(183, 190); }
                  break;
               case 183:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(183, 190); }
                  break;
               case 185:
                  if (curChar == 32)
                     { jjAddStates(102, 103); }
                  break;
               case 186:
                  if (curChar == 62 && kind > 18)
                     kind = 18;
                  break;
               case 191:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(191, 200); }
                  break;
               case 193:
                  if (curChar == 32)
                     { jjAddStates(104, 105); }
                  break;
               case 194:
                  if (curChar == 62 && kind > 25)
                     kind = 25;
                  break;
               case 201:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(201, 202); }
                  break;
               case 202:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(203, 212); }
                  break;
               case 203:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(203, 212); }
                  break;
               case 205:
                  if (curChar == 32)
                     { jjAddStates(106, 107); }
                  break;
               case 206:
                  if (curChar == 62 && kind > 26)
                     kind = 26;
                  break;
               case 213:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(213, 219); }
                  break;
               case 215:
                  if (curChar == 32)
                     { jjAddStates(108, 109); }
                  break;
               case 216:
                  if (curChar == 62 && kind > 27)
                     kind = 27;
                  break;
               case 220:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(220, 229); }
                  break;
               case 222:
                  if (curChar == 32)
                     { jjAddStates(110, 111); }
                  break;
               case 223:
                  if (curChar == 62 && kind > 28)
                     kind = 28;
                  break;
               case 230:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(230, 238); }
                  break;
               case 232:
                  if (curChar == 32)
                     { jjAddStates(112, 113); }
                  break;
               case 233:
                  if (curChar == 62 && kind > 29)
                     kind = 29;
                  break;
               case 239:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(239, 245); }
                  break;
               case 241:
                  if (curChar == 32)
                     { jjAddStates(114, 115); }
                  break;
               case 242:
                  if (curChar == 62 && kind > 30)
                     kind = 30;
                  break;
               case 246:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(246, 252); }
                  break;
               case 248:
                  if (curChar == 32)
                     { jjAddStates(116, 117); }
                  break;
               case 249:
                  if (curChar == 62 && kind > 31)
                     kind = 31;
                  break;
               case 253:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(253, 263); }
                  break;
               case 255:
                  if (curChar == 32)
                     { jjAddStates(118, 119); }
                  break;
               case 256:
                  if (curChar == 62 && kind > 32)
                     kind = 32;
                  break;
               case 264:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(264, 265); }
                  break;
               case 265:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(266, 272); }
                  break;
               case 266:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(266, 272); }
                  break;
               case 268:
                  if (curChar == 32)
                     { jjAddStates(120, 121); }
                  break;
               case 269:
                  if (curChar == 62 && kind > 33)
                     kind = 33;
                  break;
               case 273:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(273, 274); }
                  break;
               case 274:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(275, 284); }
                  break;
               case 275:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(275, 284); }
                  break;
               case 277:
                  if (curChar == 32)
                     { jjAddStates(122, 123); }
                  break;
               case 278:
                  if (curChar == 62 && kind > 34)
                     kind = 34;
                  break;
               case 285:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(285, 286); }
                  break;
               case 286:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(287, 295); }
                  break;
               case 287:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(287, 295); }
                  break;
               case 289:
                  if (curChar == 32)
                     { jjAddStates(124, 125); }
                  break;
               case 290:
                  if (curChar == 62 && kind > 35)
                     kind = 35;
                  break;
               case 296:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(296, 297); }
                  break;
               case 297:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(298, 304); }
                  break;
               case 298:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(298, 304); }
                  break;
               case 300:
                  if (curChar == 32)
                     { jjAddStates(126, 127); }
                  break;
               case 301:
                  if (curChar == 62 && kind > 36)
                     kind = 36;
                  break;
               case 305:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(305, 306); }
                  break;
               case 306:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(307, 313); }
                  break;
               case 307:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(307, 313); }
                  break;
               case 309:
                  if (curChar == 32)
                     { jjAddStates(128, 129); }
                  break;
               case 310:
                  if (curChar == 62 && kind > 37)
                     kind = 37;
                  break;
               case 314:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(314, 315); }
                  break;
               case 315:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(316, 326); }
                  break;
               case 316:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(316, 326); }
                  break;
               case 318:
                  if (curChar == 32)
                     { jjAddStates(130, 131); }
                  break;
               case 319:
                  if (curChar == 62 && kind > 38)
                     kind = 38;
                  break;
               case 327:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(327, 328); }
                  break;
               case 329:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(132, 134); }
                  break;
               case 330:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(330, 331); }
                  break;
               case 331:
                  if (curChar == 62 && kind > 40)
                     kind = 40;
                  break;
               case 332:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(332, 333); }
                  break;
               case 333:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(334, 335); }
                  break;
               case 334:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(334, 335); }
                  break;
               case 336:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(135, 137); }
                  break;
               case 337:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(337, 338); }
                  break;
               case 338:
                  if (curChar == 62 && kind > 41)
                     kind = 41;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 339:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(132, 134); }
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 262;
                  else if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 244;
                  else if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 228;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 218;
                  else if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 199;
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  else if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  else if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  else if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 251;
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  else if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  else if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 237;
                  break;
               case 1:
                  { jjAddStates(138, 139); }
                  break;
               case 6:
                  if ((0x200000002L & l) != 0L)
                     { jjAddStates(68, 69); }
                  break;
               case 9:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 10:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if ((0x10000000100L & l) != 0L)
                     { jjAddStates(70, 71); }
                  break;
               case 17:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 18:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 21:
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(72, 73); }
                  break;
               case 24:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 25:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x40000000400L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 30:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(74, 75); }
                  break;
               case 33:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 34:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 42:
                  if ((0x400000004000L & l) != 0L)
                     { jjAddStates(76, 77); }
                  break;
               case 45:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 46:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 52:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(78, 79); }
                  break;
               case 55:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 56:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 61:
                  if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(80, 81); }
                  break;
               case 64:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 65:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 68:
                  if ((0x800000008000L & l) != 0L)
                     { jjAddStates(82, 83); }
                  break;
               case 71:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 72:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 82:
                  if ((0x800000008000L & l) != 0L)
                     { jjAddStates(84, 85); }
                  break;
               case 85:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 86:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 92:
                  if ((0x200000002L & l) != 0L)
                     { jjAddStates(86, 87); }
                  break;
               case 95:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 96:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 102:
                  if ((0x10000000100L & l) != 0L)
                     { jjAddStates(88, 89); }
                  break;
               case 105:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 106:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 111:
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(90, 91); }
                  break;
               case 114:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 115:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if ((0x40000000400L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 122:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(92, 93); }
                  break;
               case 125:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 126:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 136:
                  if ((0x400000004000L & l) != 0L)
                     { jjAddStates(94, 95); }
                  break;
               case 139:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 140:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 148:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(96, 97); }
                  break;
               case 151:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 152:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 159:
                  if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(98, 99); }
                  break;
               case 162:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 163:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 168:
                  if ((0x800000008000L & l) != 0L)
                     { jjAddStates(100, 101); }
                  break;
               case 171:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 172:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 184:
                  if ((0x800000008000L & l) != 0L)
                     { jjAddStates(102, 103); }
                  break;
               case 187:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 188:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 189:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 190:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 192:
                  if ((0x200000002L & l) != 0L)
                     { jjAddStates(104, 105); }
                  break;
               case 195:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 196:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 197:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 200:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 204:
                  if ((0x200000002L & l) != 0L)
                     { jjAddStates(106, 107); }
                  break;
               case 207:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 208:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 209:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 210:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 211:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 210;
                  break;
               case 212:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 214:
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(108, 109); }
                  break;
               case 217:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 218:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 219:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 221:
                  if ((0x4000000040000L & l) != 0L)
                     { jjAddStates(110, 111); }
                  break;
               case 224:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 225:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 224;
                  break;
               case 226:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 225;
                  break;
               case 227:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 228:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 229:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 228;
                  break;
               case 231:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(112, 113); }
                  break;
               case 234:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 231;
                  break;
               case 235:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 236:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 237:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 236;
                  break;
               case 238:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 237;
                  break;
               case 240:
                  if ((0x100000001000L & l) != 0L)
                     { jjAddStates(114, 115); }
                  break;
               case 243:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 240;
                  break;
               case 244:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 243;
                  break;
               case 245:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 244;
                  break;
               case 247:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(116, 117); }
                  break;
               case 250:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 247;
                  break;
               case 251:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 250;
                  break;
               case 252:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 251;
                  break;
               case 254:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(118, 119); }
                  break;
               case 257:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 258:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 257;
                  break;
               case 259:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 258;
                  break;
               case 260:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 259;
                  break;
               case 261:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 260;
                  break;
               case 262:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 263:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 262;
                  break;
               case 267:
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(120, 121); }
                  break;
               case 270:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 267;
                  break;
               case 271:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 270;
                  break;
               case 272:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 271;
                  break;
               case 276:
                  if ((0x4000000040000L & l) != 0L)
                     { jjAddStates(122, 123); }
                  break;
               case 279:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 276;
                  break;
               case 280:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 279;
                  break;
               case 281:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 280;
                  break;
               case 282:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 281;
                  break;
               case 283:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 282;
                  break;
               case 284:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 283;
                  break;
               case 288:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(124, 125); }
                  break;
               case 291:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 288;
                  break;
               case 292:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 291;
                  break;
               case 293:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 292;
                  break;
               case 294:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 293;
                  break;
               case 295:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 294;
                  break;
               case 299:
                  if ((0x100000001000L & l) != 0L)
                     { jjAddStates(126, 127); }
                  break;
               case 302:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 299;
                  break;
               case 303:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 302;
                  break;
               case 304:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 303;
                  break;
               case 308:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(128, 129); }
                  break;
               case 311:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 308;
                  break;
               case 312:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 311;
                  break;
               case 313:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 312;
                  break;
               case 317:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(130, 131); }
                  break;
               case 320:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 317;
                  break;
               case 321:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 320;
                  break;
               case 322:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 321;
                  break;
               case 323:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 322;
                  break;
               case 324:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 323;
                  break;
               case 325:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 324;
                  break;
               case 326:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 325;
                  break;
               case 328:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(132, 134); }
                  break;
               case 329:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(132, 134); }
                  break;
               case 335:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(135, 137); }
                  break;
               case 336:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(135, 137); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(138, 139); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 339 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   5, 12, 13, 19, 20, 28, 29, 40, 41, 50, 51, 59, 60, 66, 67, 80, 
   81, 88, 89, 90, 99, 100, 108, 109, 119, 120, 133, 134, 145, 146, 156, 157, 
   165, 166, 181, 182, 191, 200, 201, 202, 213, 219, 220, 229, 230, 238, 239, 245, 
   246, 252, 253, 263, 264, 265, 273, 274, 285, 286, 296, 297, 305, 306, 314, 315, 
   327, 328, 332, 333, 7, 8, 15, 16, 22, 23, 31, 32, 43, 44, 53, 54, 
   62, 63, 69, 70, 83, 84, 93, 94, 103, 104, 112, 113, 123, 124, 137, 138, 
   149, 150, 160, 161, 169, 170, 185, 186, 193, 194, 205, 206, 215, 216, 222, 223, 
   232, 233, 241, 242, 248, 249, 255, 256, 268, 269, 277, 278, 289, 290, 300, 301, 
   309, 310, 318, 319, 329, 330, 331, 336, 337, 338, 1, 2, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\74", "\76", null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                System.out.println(image);
         break;
      case 2 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                               System.out.println(image);
         break;
      case 3 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                   System.out.println(image);
         break;
      case 4 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                         System.out.println(image);
         break;
      case 5 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                     System.out.println(image);
         break;
      case 6 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                   System.out.println(image);
         break;
      case 7 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                               System.out.println(image);
         break;
      case 8 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                             System.out.println(image);
         break;
      case 9 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                 System.out.println(image);
         break;
      case 10 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                          System.out.println(image);
         break;
      case 11 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                        System.out.println(image);
         break;
      case 12 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                            System.out.println(image);
         break;
      case 13 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                  System.out.println(image);
         break;
      case 14 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                              System.out.println(image);
         break;
      case 15 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                            System.out.println(image);
         break;
      case 16 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                        System.out.println(image);
         break;
      case 17 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                      System.out.println(image);
         break;
      case 18 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                          System.out.println(image);
         break;
      case 21 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println(image);
         break;
      case 22 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println(image);
         break;
      case 23 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                 System.out.println(image);
         break;
      case 24 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                            System.out.println(image);
         break;
      case 25 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                    System.out.println(image);
         break;
      case 26 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                             System.out.println(image);
         break;
      case 27 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                              System.out.println(image);
         break;
      case 28 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                     System.out.println(image);
         break;
      case 29 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                   System.out.println(image);
         break;
      case 30 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                              System.out.println(image);
         break;
      case 31 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                               System.out.println(image);
         break;
      case 32 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                       System.out.println(image);
         break;
      case 33 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                        System.out.println(image);
         break;
      case 34 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                              System.out.println(image);
         break;
      case 35 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                            System.out.println(image);
         break;
      case 36 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                       System.out.println(image);
         break;
      case 37 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                        System.out.println(image);
         break;
      case 38 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                System.out.println(image);
         break;
      case 39 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                  System.out.println(image);
         break;
      case 40 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                      System.out.println(image);
         break;
      case 41 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                               System.out.println(image);
         break;
      case 42 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println(image);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public dbGrammarTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public dbGrammarTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 339; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x7ffffffffffL, 
};
static final long[] jjtoSkip = {
   0x780000000000L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[339];
    private final int[] jjstateSet = new int[2 * 339];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected char curChar;
}
