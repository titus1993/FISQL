options {
IGNORE_CASE = true;
STATIC = false;
OUTPUT_DIRECTORY="D:\\Titus\\Documents\\Proyectos\\Compiladores 2\\Proyecto 1\\FISQL\\Servidor Base de Datos\\[Compi2]Proyecto1_201213587\\src\\Analisis\\XML\\DB\\";

}

PARSER_BEGIN(dbGrammar)
package Analisis.XML.DB;

public class dbGrammar {
  public static void main(String args[]) throws ParseException {
    dbGrammar parser = new dbGrammar(System.in);
    parser.S();
  }
}
PARSER_END(dbGrammar)


TOKEN:
{
  
    <T_TABLA_IZQ: ("<"(" ")*"tabla"(" ")*">")> {System.out.println(image);}
    |<T_PATH_IZQ: ("<"(" ")*"path"(" ")*">")> {System.out.println(image);}
    |<T_OBJECT_IZQ: ("<"(" ")*"object"(" ")*">")> {System.out.println(image);}
    |<T_PROCEDURE_IZQ: ("<"(" ")*"procedure"(" ")*">")> {System.out.println(image);}
    |<T_FUNCION_IZQ: ("<"(" ")*"funcion"(" ")*">")> {System.out.println(image);}
    |<T_NOMBRE_IZQ: ("<"(" ")*"nombre"(" ")*">")> {System.out.println(image);}
    |<T_ROWS_IZQ: ("<"(" ")*"rows"(" ")*">")> {System.out.println(image);}
    |<T_COMPLEMENTO_IZQ: ("<"(" ")*"complemento"(" ")*">")> {System.out.println(image);}
    |<T_CAMPO_IZQ: ("<"(" ")*"campo"(" ")*">")> {System.out.println(image);}
    |<T_TABLA_DER: ("<"(" ")*"/"(" ")*"tabla"(" ")*">")> {System.out.println(image);}
    |<T_PATH_DER: ("<"(" ")*"/"(" ")*"path"(" ")*">")> {System.out.println(image);}
    |<T_OBJECT_DER: ("<"(" ")*"/"(" ")*"object"(" ")*">")> {System.out.println(image);}
    |<T_PROCEDURE_DER: ("<"(" ")*"/"(" ")*"procedure"(" ")*">")> {System.out.println(image);}
    |<T_FUNCION_DER: ("<"(" ")*"/"(" ")*"funcion"(" ")*">")> {System.out.println(image);}
    |<T_NOMBRE_DER: ("<"(" ")*"/"(" ")*"nombre"(" ")*">")> {System.out.println(image);}
    |<T_ROWS_DER: ("<"(" ")*"/"(" ")*"rows"(" ")*">")> {System.out.println(image);}
    |<T_COMPLEMENTO_DER: ("<"(" ")*"/"(" ")*"complemento"(" ")*">")> {System.out.println(image);}
    |<T_CAMPO_DER: ("<"(" ")*"/"(" ")*"campo"(" ")*">")> {System.out.println(image);}

    |<T_NULO:("nulo")> {System.out.println(image);}
    |<T_NO_NULO:("no nulo")> {System.out.println(image);}
    |<T_AUTOINCREMETABLE:("autoincrementable")> {System.out.println(image);}
    |<T_LLAVE_PRIMARIA:("llave_primaria")> {System.out.println(image);}
    |<T_FORANEA_IZQ:("<"(" ")*"foranea"(" ")*">")> {System.out.println(image);}
    |<T_FORANEA_DER:("<"(" ")*"/"(" ")*"foranea"(" ")*">")> {System.out.println(image);}
    
}

TOKEN:
{
  
    <T_TEXT_IZQ: ("<"(" ")*"text"(" ")*">")> {System.out.println(image);}
    |<T_INTEGER_IZQ: ("<"(" ")*"integer"(" ")*">")> {System.out.println(image);}
    |<T_DOUBLE_IZQ: ("<"(" ")*"double"(" ")*">")> {System.out.println(image);}
    |<T_BOOL_IZQ:("<"(" ")*"bool"(" ")*">")> {System.out.println(image);}
    |<T_DATE_IZQ: ("<"(" ")*"date"(" ")*">")> {System.out.println(image);}
    |<T_DATETIME_IZQ: ("<"(" ")*"datetime"(" ")*">")> {System.out.println(image);}
    |<T_TEXT_DER: ("<"(" ")*"/"(" ")*"text"(" ")*">")> {System.out.println(image);}
    |<T_INTEGER_DER: ("<"(" ")*"/"(" ")*"integer"(" ")*">")> {System.out.println(image);}
    |<T_DOUBLE_DER: ("<"(" ")*"/"(" ")*"double"(" ")*">")> {System.out.println(image);}
    |<T_BOOL_DER:("<"(" ")*"/"(" ")*"bool"(" ")*">")> {System.out.println(image);}
    |<T_DATE_DER: ("<"(" ")*"/"(" ")*"date"(" ")*">")> {System.out.println(image);}
    |<T_DATETIME_DER: ("<"(" ")*"/"(" ")*"datetime"(" ")*">")> {System.out.println(image);}
}

TOKEN:
{  
    <CADENA:"\"" (~["\""])*"\""> {System.out.println(image);}
    |<ID_IZQ: ("<"(" ")*["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])*(" ")*">"> {System.out.println(image);}
    |<ID_DER: ("<"(" ")*"/"(" ")*["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])*(" ")*">"> {System.out.println(image);}
    
}

SKIP: 
{
  " "
| "\n"
| "\r"
| "\t"
}

void S():
{}
{   {System.out.println("Comienza!!");}
    DB()
    {System.out.println("Exito!!");}
}


void DB():
{}
{
    PROCEDURE() 
    OBJECT()
    (L_TABLA())?
}

void PROCEDURE():
{}
{
    <T_PROCEDURE_IZQ> 
        PATH()
    <T_PROCEDURE_DER>  
}

void FUNCION():
{}
{
    <T_FUNCION_IZQ> 
        PATH()
    <T_FUNCION_DER>  
}

void OBJECT():
{}
{
    <T_OBJECT_IZQ> 
        PATH()
    <T_OBJECT_DER>  
}

void PATH():
{}
{
    <T_PATH_IZQ> 
        <CADENA>
    <T_PATH_DER>
}


void L_TABLA():
{}
{
    TABLA() (L_TABLA())?
}

void TABLA():
{}
{
    <T_TABLA_IZQ> 
        NOMBRE() 
        PATH()
        ROWS()
    <T_TABLA_DER> 
}

void NOMBRE():
{}
{
    <T_NOMBRE_IZQ> 
        <CADENA>
    <T_NOMBRE_DER>
}

void ROWS():
{}
{
    <T_ROWS_IZQ> 
        L_CAMPOS()
    <T_ROWS_DER>
}

void L_CAMPOS():
{}
{
    CAMPO() (L_CAMPOS())?
}

void CAMPO():
{}
{
    <T_CAMPO_IZQ> 
        (<T_INTEGER_IZQ> <CADENA> <T_INTEGER_DER>
        |<T_TEXT_IZQ> <CADENA> <T_TEXT_DER>
        |<T_DOUBLE_IZQ> <CADENA> <T_DOUBLE_DER>
        |<T_BOOL_IZQ> <CADENA> <T_BOOL_DER>
        |<T_DATE_IZQ> <CADENA> <T_DATE_DER>
        |<T_DATETIME_IZQ> <CADENA> <T_DATETIME_DER>
        |<ID_IZQ> <CADENA> <ID_DER>) 
            (L_COMPLEMENTO())?        
    <T_CAMPO_DER>
    
}

void L_COMPLEMENTO():
{}
{
    COMPLEMENTO() (L_COMPLEMENTO())?
}

void COMPLEMENTO():
{}
{
    <T_COMPLEMENTO_IZQ>
        (<T_NULO>
        |<T_NO_NULO>
        |<T_AUTOINCREMETABLE>
        |<T_LLAVE_PRIMARIA>
        |FORANEA())
    <T_COMPLEMENTO_DER>
}

void FORANEA():
{}
{
    <T_FORANEA_IZQ> <CADENA> <T_FORANEA_DER>
}