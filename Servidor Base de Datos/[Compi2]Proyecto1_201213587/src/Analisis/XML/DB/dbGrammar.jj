options {
IGNORE_CASE = true;
STATIC = false;
OUTPUT_DIRECTORY="D:\\Titus\\Documents\\Proyectos\\Compiladores 2\\Proyecto 1\\FISQL\\Servidor Base de Datos\\[Compi2]Proyecto1_201213587\\src\\Analisis\\XML\\DB\\";

}

PARSER_BEGIN(dbGrammar)
package Analisis.XML.DB;

import Funciones.XML.*;
import Static.*;
import java.util.ArrayList;

public class dbGrammar {
  public static void main(String args[]) throws ParseException {
    dbGrammar parser = new dbGrammar(System.in);
    parser.S();
  }
}
PARSER_END(dbGrammar)


TOKEN:
{
  
    <T_TABLA_IZQ: ("<"(" ")*"tabla"(" ")*">")> {System.out.println(image);}
    |<T_PATH_IZQ: ("<"(" ")*"path"(" ")*">")> {System.out.println(image);}
    |<T_OBJECT_IZQ: ("<"(" ")*"object"(" ")*">")> {System.out.println(image);}
    |<T_PROCEDURE_IZQ: ("<"(" ")*"procedure"(" ")*">")> {System.out.println(image);}
    |<T_FUNCION_IZQ: ("<"(" ")*"funcion"(" ")*">")> {System.out.println(image);}
    |<T_NOMBRE_IZQ: ("<"(" ")*"nombre"(" ")*">")> {System.out.println(image);}
    |<T_ROWS_IZQ: ("<"(" ")*"rows"(" ")*">")> {System.out.println(image);}
    |<T_COMPLEMENTO_IZQ: ("<"(" ")*"complemento"(" ")*">")> {System.out.println(image);}
    |<T_CAMPO_IZQ: ("<"(" ")*"campo"(" ")*">")> {System.out.println(image);}
    |<T_TABLA_DER: ("<"(" ")*"/"(" ")*"tabla"(" ")*">")> {System.out.println(image);}
    |<T_PATH_DER: ("<"(" ")*"/"(" ")*"path"(" ")*">")> {System.out.println(image);}
    |<T_OBJECT_DER: ("<"(" ")*"/"(" ")*"object"(" ")*">")> {System.out.println(image);}
    |<T_PROCEDURE_DER: ("<"(" ")*"/"(" ")*"procedure"(" ")*">")> {System.out.println(image);}
    |<T_FUNCION_DER: ("<"(" ")*"/"(" ")*"funcion"(" ")*">")> {System.out.println(image);}
    |<T_NOMBRE_DER: ("<"(" ")*"/"(" ")*"nombre"(" ")*">")> {System.out.println(image);}
    |<T_ROWS_DER: ("<"(" ")*"/"(" ")*"rows"(" ")*">")> {System.out.println(image);}
    |<T_COMPLEMENTO_DER: ("<"(" ")*"/"(" ")*"complemento"(" ")*">")> {System.out.println(image);}
    |<T_CAMPO_DER: ("<"(" ")*"/"(" ")*"campo"(" ")*">")> {System.out.println(image);}

    |<T_NULO:("nulo")> {System.out.println(image);}
    |<T_NO_NULO:("no nulo")> {System.out.println(image);}
    |<T_AUTOINCREMETABLE:("autoincrementable")> {System.out.println(image);}
    |<T_LLAVE_PRIMARIA:("llave_primaria")> {System.out.println(image);}
    |<T_FORANEA_IZQ:("<"(" ")*"foranea"(" ")*">")> {System.out.println(image);}
    |<T_FORANEA_DER:("<"(" ")*"/"(" ")*"foranea"(" ")*">")> {System.out.println(image);}
    
}

TOKEN:
{
  
    <T_TEXT_IZQ: ("<"(" ")*"text"(" ")*">")> {System.out.println(image);}
    |<T_INTEGER_IZQ: ("<"(" ")*"integer"(" ")*">")> {System.out.println(image);}
    |<T_DOUBLE_IZQ: ("<"(" ")*"double"(" ")*">")> {System.out.println(image);}
    |<T_BOOL_IZQ:("<"(" ")*"bool"(" ")*">")> {System.out.println(image);}
    |<T_DATE_IZQ: ("<"(" ")*"date"(" ")*">")> {System.out.println(image);}
    |<T_DATETIME_IZQ: ("<"(" ")*"datetime"(" ")*">")> {System.out.println(image);}
    |<T_TEXT_DER: ("<"(" ")*"/"(" ")*"text"(" ")*">")> {System.out.println(image);}
    |<T_INTEGER_DER: ("<"(" ")*"/"(" ")*"integer"(" ")*">")> {System.out.println(image);}
    |<T_DOUBLE_DER: ("<"(" ")*"/"(" ")*"double"(" ")*">")> {System.out.println(image);}
    |<T_BOOL_DER:("<"(" ")*"/"(" ")*"bool"(" ")*">")> {System.out.println(image);}
    |<T_DATE_DER: ("<"(" ")*"/"(" ")*"date"(" ")*">")> {System.out.println(image);}
    |<T_DATETIME_DER: ("<"(" ")*"/"(" ")*"datetime"(" ")*">")> {System.out.println(image);}
}

TOKEN:
{  
    <CADENA:"\"" (~["\""])*"\""> {System.out.println(image);}
    |<ID_IZQ: ("<"(" ")*["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])*(" ")*">"> {System.out.println(image);}
    |<ID_DER: ("<"(" ")*"/"(" ")*["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])*(" ")*">"> {System.out.println(image);}
    
}

SKIP: 
{
  " "
| "\n"
| "\r"
| "\t"
}

DataBase S():
{DataBase b;}
{   {System.out.println("Comienza!!");}
    b=DB()
    {System.out.println("Exito!!");
    return b;}
}


DataBase DB():
{String p,f,o; ArrayList<Tabla> t = new ArrayList<Tabla>();}
{
    p=PROCEDURE() 
    f=FUNCION()
    o=OBJECT()
    (t=L_TABLA())?
    {DataBase d = new DataBase(p, f, o, t); return d;}
}

String PROCEDURE():
{String t;}
{
    <T_PROCEDURE_IZQ> 
        t=PATH()
    <T_PROCEDURE_DER>  {return t;}
}

String FUNCION():
{String t;}
{
    <T_FUNCION_IZQ> 
        t=PATH()
    <T_FUNCION_DER>  {return t;}
}

String OBJECT():
{String t;}
{
    <T_OBJECT_IZQ> 
        t=PATH()
    <T_OBJECT_DER>  {return t;}
}

String PATH():
{Token t;}
{
    <T_PATH_IZQ> 
        t=<CADENA>
    <T_PATH_DER> {return t.image.substring(1, t.image.length() - 1).trim();}
}


ArrayList<Tabla> L_TABLA():
{ArrayList<Tabla> c = new ArrayList<Tabla>();
ArrayList<Tabla> c2 = new ArrayList<Tabla>();}
{
    c=TABLA() (c2=L_TABLA(){
                    for(int i=0; i < c2.size(); i++){
                        c.add(c2.get(i));
                    }
                }
            )? {return c;}
}

ArrayList<Tabla> TABLA():
{String n, p; ArrayList<ColumnaEstructura> ce;}
{
    <T_TABLA_IZQ> 
        n=NOMBRE() 
        p=PATH()
        ce=ROWS()
    <T_TABLA_DER>

        {Tabla t = new Tabla(n, p, ce);
        ArrayList<Tabla> l = new ArrayList<Tabla>();
        l.add(t);
            return l;
        }
}

String NOMBRE():
{Token t;}
{
    <T_NOMBRE_IZQ> 
        t=<CADENA>
    <T_NOMBRE_DER>
    {return t.image.substring(1, t.image.length() - 1).trim();}
}

ArrayList<ColumnaEstructura> ROWS():
{ArrayList<ColumnaEstructura> c;}
{
    <T_ROWS_IZQ> 
        c=L_CAMPOS()
    <T_ROWS_DER>
    {return c;}
}

ArrayList<ColumnaEstructura> L_CAMPOS():
{ArrayList<ColumnaEstructura> c = new ArrayList<ColumnaEstructura>();
ArrayList<ColumnaEstructura> c2 = new ArrayList<ColumnaEstructura>();}
{
    c=CAMPO() (c2=L_CAMPOS(){
                    for(int i=0; i < c2.size(); i++){
                        c.add(c2.get(i));
                    }
                }
            )? {return c;}
}

ArrayList<ColumnaEstructura> CAMPO():
{Token t,i; Complemento c = new Complemento(); ColumnaEstructura ce = new ColumnaEstructura();}
{
    <T_CAMPO_IZQ> 
        (<T_INTEGER_IZQ> t=<CADENA> <T_INTEGER_DER> {ce.Tipo = 0; ce.NombreCampo = t.image.substring(1, t.image.length() - 1).trim(); ce.TipoCampo = Tools.tinteger;}
        |<T_TEXT_IZQ> t=<CADENA> <T_TEXT_DER> {ce.Tipo = 0; ce.NombreCampo = t.image.substring(1, t.image.length() - 1).trim(); ce.TipoCampo = Tools.ttext;}
        |<T_DOUBLE_IZQ> t=<CADENA> <T_DOUBLE_DER> {ce.Tipo = 0; ce.NombreCampo = t.image.substring(1, t.image.length() - 1).trim(); ce.TipoCampo = Tools.tdouble;}
        |<T_BOOL_IZQ> t=<CADENA> <T_BOOL_DER>   {ce.Tipo = 0; ce.NombreCampo = t.image.substring(1, t.image.length() - 1).trim(); ce.TipoCampo = Tools.tbool;}
        |<T_DATE_IZQ> t=<CADENA> <T_DATE_DER>  {ce.Tipo = 0; ce.NombreCampo = t.image.substring(1, t.image.length() - 1).trim(); ce.TipoCampo = Tools.tdate;}
        |<T_DATETIME_IZQ> t=<CADENA> <T_DATETIME_DER>  {ce.Tipo = 0; ce.NombreCampo = t.image.substring(1, t.image.length() - 1).trim(); ce.TipoCampo = Tools.tdatetime;}
        |i=<ID_IZQ> t=<CADENA> <ID_DER> {ce.Tipo = 1; ce.NombreCampo = t.image.substring(1, t.image.length() - 1).trim(); ce.TipoCampo = i.image.substring(1, i.image.length() - 1).trim();}) 
            (c=L_COMPLEMENTO() {ce.Complementos = c;})?        
    <T_CAMPO_DER>
    {
        ArrayList<ColumnaEstructura> l = new ArrayList<ColumnaEstructura>();
        l.add(ce);
        return l;}
    
}

Complemento L_COMPLEMENTO():
{Complemento c; Complemento c2;}
{
    c=COMPLEMENTO() (c2=L_COMPLEMENTO(){
                                        c.isNulo = c2.isNulo;
                                        c.isAutoincrementable = c2.isAutoincrementable;
                                        c.isPrimary = c2.isPrimary;
                                        c.isForanea = c2.isForanea;
                                        c.Foranea = c2.Foranea;
                                        })?
    {return c;}
}

Complemento COMPLEMENTO():
{String c; Complemento com = new Complemento();}
{
    <T_COMPLEMENTO_IZQ>
        (<T_NULO> {com.isNulo = true;}
        |<T_NO_NULO> {com.isNulo = false;}
        |<T_AUTOINCREMETABLE> {com.isAutoincrementable = true;}
        |<T_LLAVE_PRIMARIA> {com.isPrimary = true;}
        |c=FORANEA(){com.isForanea = true; com.Foranea = c;})
    <T_COMPLEMENTO_DER>
    {return com;}
}

String FORANEA():
{Token t;}
{
    <T_FORANEA_IZQ> t=<CADENA> <T_FORANEA_DER> {return t.image.substring(1,t.image.length() - 1).trim();}
}