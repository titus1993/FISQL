/* reporteGrammarTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. reporteGrammarTokenManager.java */
package Analisis.XML.Reporte;
import Funciones.XML.*;
import Static.*;
import java.util.ArrayList;

/** Token Manager. */
@SuppressWarnings("unused")public class reporteGrammarTokenManager implements reporteGrammarConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x40000000000000L, 0x0L
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0xffbfffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 106;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 60)
                     { jjCheckNAddStates(0, 25); }
                  break;
               case 1:
                  { jjAddStates(26, 27); }
                  break;
               case 4:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(4, 10); }
                  break;
               case 6:
                  if (curChar == 32)
                     { jjAddStates(28, 29); }
                  break;
               case 7:
                  if (curChar == 62 && kind > 1)
                     kind = 1;
                  break;
               case 11:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(11, 17); }
                  break;
               case 13:
                  if (curChar == 32)
                     { jjAddStates(30, 31); }
                  break;
               case 14:
                  if (curChar == 62 && kind > 2)
                     kind = 2;
                  break;
               case 18:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(18, 24); }
                  break;
               case 20:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     { jjAddStates(32, 33); }
                  break;
               case 21:
                  if (curChar == 62 && kind > 3)
                     kind = 3;
                  break;
               case 25:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(25, 33); }
                  break;
               case 27:
                  if (curChar == 32)
                     { jjAddStates(34, 35); }
                  break;
               case 28:
                  if (curChar == 62 && kind > 4)
                     kind = 4;
                  break;
               case 34:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(34, 39); }
                  break;
               case 36:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     { jjAddStates(36, 37); }
                  break;
               case 37:
                  if (curChar == 62 && kind > 5)
                     kind = 5;
                  break;
               case 40:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(40, 49); }
                  break;
               case 42:
                  if (curChar == 32)
                     { jjAddStates(38, 39); }
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(40, 42); }
                  break;
               case 45:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(45, 46); }
                  break;
               case 46:
                  if (curChar == 62 && kind > 6)
                     kind = 6;
                  break;
               case 50:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(50, 54); }
                  break;
               case 51:
                  if (curChar == 49)
                     { jjCheckNAddTwoStates(52, 53); }
                  break;
               case 52:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(52, 53); }
                  break;
               case 53:
                  if (curChar == 62 && kind > 7)
                     kind = 7;
                  break;
               case 55:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(55, 56); }
                  break;
               case 56:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(57, 63); }
                  break;
               case 57:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(57, 63); }
                  break;
               case 59:
                  if (curChar == 32)
                     { jjAddStates(43, 44); }
                  break;
               case 60:
                  if (curChar == 62 && kind > 8)
                     kind = 8;
                  break;
               case 64:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(64, 65); }
                  break;
               case 65:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(66, 72); }
                  break;
               case 66:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(66, 72); }
                  break;
               case 68:
                  if (curChar == 32)
                     { jjAddStates(45, 46); }
                  break;
               case 69:
                  if (curChar == 62 && kind > 9)
                     kind = 9;
                  break;
               case 73:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(73, 74); }
                  break;
               case 74:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(75, 81); }
                  break;
               case 75:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(75, 81); }
                  break;
               case 77:
                  if (curChar == 32)
                     { jjAddStates(47, 48); }
                  break;
               case 78:
                  if (curChar == 62 && kind > 10)
                     kind = 10;
                  break;
               case 82:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(82, 83); }
                  break;
               case 83:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(84, 89); }
                  break;
               case 84:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(84, 89); }
                  break;
               case 86:
                  if (curChar == 32)
                     { jjAddStates(49, 50); }
                  break;
               case 87:
                  if (curChar == 62 && kind > 11)
                     kind = 11;
                  break;
               case 90:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(90, 91); }
                  break;
               case 91:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(92, 98); }
                  break;
               case 92:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(92, 98); }
                  break;
               case 94:
                  if (curChar == 32)
                     { jjAddStates(51, 52); }
                  break;
               case 95:
                  if (curChar == 62 && kind > 12)
                     kind = 12;
                  break;
               case 99:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(99, 100); }
                  break;
               case 100:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(101, 105); }
                  break;
               case 101:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(101, 105); }
                  break;
               case 102:
                  if (curChar == 49)
                     { jjCheckNAddTwoStates(103, 104); }
                  break;
               case 103:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(103, 104); }
                  break;
               case 104:
                  if (curChar == 62 && kind > 13)
                     kind = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  { jjAddStates(26, 27); }
                  break;
               case 5:
                  if ((0x100000001000L & l) != 0L)
                     { jjAddStates(28, 29); }
                  break;
               case 8:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 9:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if ((0x1000000010L & l) != 0L)
                     { jjAddStates(30, 31); }
                  break;
               case 15:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 16:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 19:
                  if ((0x200000002000000L & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 20:
                  { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 22:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 23:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 26:
                  if ((0x4000000040000L & l) != 0L)
                     { jjAddStates(34, 35); }
                  break;
               case 29:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 30:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 35:
                  if ((0x40000000400000L & l) != 0L)
                     { jjCheckNAddTwoStates(36, 37); }
                  break;
               case 36:
                  { jjCheckNAddTwoStates(36, 37); }
                  break;
               case 38:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 39:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 41:
                  if ((0x100000001000L & l) != 0L)
                     { jjAddStates(38, 39); }
                  break;
               case 43:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(40, 42); }
                  break;
               case 44:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(40, 42); }
                  break;
               case 47:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 48:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 54:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 58:
                  if ((0x100000001000L & l) != 0L)
                     { jjAddStates(43, 44); }
                  break;
               case 61:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 62:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 67:
                  if ((0x1000000010L & l) != 0L)
                     { jjAddStates(45, 46); }
                  break;
               case 70:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 71:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 76:
                  if ((0x200000002000000L & l) != 0L)
                     { jjAddStates(47, 48); }
                  break;
               case 79:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 80:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 85:
                  if ((0x40000000400000L & l) != 0L)
                     { jjAddStates(49, 50); }
                  break;
               case 88:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 89:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 93:
                  if ((0x100000001000L & l) != 0L)
                     { jjAddStates(51, 52); }
                  break;
               case 96:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 97:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 105:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 20:
                  if ((jjbitVec2[i2] & l2) != 0L)
                     { jjAddStates(32, 33); }
                  break;
               case 36:
                  if ((jjbitVec2[i2] & l2) != 0L)
                     { jjAddStates(36, 37); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 106 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   4, 10, 11, 17, 18, 24, 25, 33, 34, 39, 40, 49, 50, 54, 55, 56, 
   64, 65, 73, 74, 82, 83, 90, 91, 99, 100, 1, 2, 6, 7, 13, 14, 
   20, 21, 27, 28, 36, 37, 42, 43, 44, 45, 46, 59, 60, 68, 69, 77, 
   78, 86, 87, 94, 95, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                              System.out.println(image);
         break;
      case 2 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                               System.out.println(image);
         break;
      case 3 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                  System.out.println(image);
         break;
      case 4 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                  System.out.println(image);
         break;
      case 5 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                System.out.println(image);
         break;
      case 6 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                                          System.out.println(image);
         break;
      case 7 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                          System.out.println(image);
         break;
      case 8 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                        System.out.println(image);
         break;
      case 9 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                        System.out.println(image);
         break;
      case 10 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                        System.out.println(image);
         break;
      case 11 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                     System.out.println(image);
         break;
      case 12 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                       System.out.println(image);
         break;
      case 13 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                  System.out.println(image);
         break;
      case 14 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                           System.out.println(image);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public reporteGrammarTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public reporteGrammarTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 106; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x7fffL, 
};
static final long[] jjtoSkip = {
   0x78000L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[106];
    private final int[] jjstateSet = new int[2 * 106];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected char curChar;
}
